---
tags:
---
{{{ ###Windows Command Shells Overview
## windows command shell
	- DOS shit

## CMD.exe 
	- Born from command.com
	- Used with XP and newer
	- What's it do?
		- directs flow of information between applications
		- translates user input into a form the OS understands
	- located in %systemroot%
		- 32-bit shell on 32-bit system, located in %systemroot%\system32,
		- 32-bit shell on 64-bit system, located in %systemroot%\syswow64, and
		- 64-bit shell on 64-bit system, located in %systemroot%\system32.
	- default value for %systemroot% is an environment variable
	- Features
		- Operates in batch mode,
		- Supports long file names,
		- Has a built-in buffer to recall past commands,
		- Has two categories of native commands built in by Microsoft: 
			> internal commands: Exist in the shell. Commands include:
				- copy
				- move
				- dir
				- set
				- date
			> standard external commands: Has its own executable file normally found in the %systemroot%\system32 directory.
			- Uses Help or /? to show available commands.
## Powershell
	- Uses cmdlets (Built in commands)
		-  Cmdlets are instances of .NET Framework classes; they are not stand-alone executables
	- built in programming features
	- Standard command line utilities
	- Built on .Net framework
	- get-command shows all cmdlets registerd in the command shell
	-  A complete list of cmdlets is available from the Windows PowerShell prompt by typing: 
		$ help *-*. 
	- Get documentation from:
		$$ help get-command 
	- Included as part of the operating system starting with Windows 7 and Windows Server Pack 2008 R2.
	- Also available for download on Windows XP and later versions.
## WMIC (Management Instrumentation Command-Line)
	- The WMIC shell prompt opens to root\cli
	- supported by Windows XP or Server 2003 and newer systems


## General
	- modes
		> interactive: identified by a blinking cursor, the user enters commands manually.
		> Batch: commands are read and executed one by one, typically from a script file
	- customization
		- change color
			$$ color 0a
		- Increase buffer size
		
		- Turn echo on and off
			$ echo
		- activate auto-complete (current session or permanantly
		
		- view command history
		
		- add macro functionality
}}} ###
{{{ ###Environment Variables
	-  strings that are used by Windows to communicate information about the location of system files, folders, and programs as they pertain to the currently logged on user
	- enable code functionality on the variety of systems and configs
	- not hardcoded (changeable)
	- System environment variables
		- defined by windows at installation
		- apply to all computer users
		- system changes are written to registry
			- these often require a reboot to take effect
		- System changes can only be done by an administrator
	> %: identifies the variable as an environmental variable
	- find environment variables
		$ reg query HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment
	- **System variables are generall ALL CAPS**

}}} ###
{{{ ###Special Charahchters
	- ^
		escape charachter
		- often used to escape CR\LF (carriage return\Line Feed)
		- Example
			```O
			echo <escape>
			#:will fail
			echo ^<escape^>
			#:Will not fail
			```C
	- Wildcards
		> *: zero or more chars
		> ?: zero or one charachter






}}} ###
{{{ ###NTFS (New Technology File System)
	- Components
		> Sector: Hardware-addressable blocks on a storage medium.
			- Typically 512 bytes and are defined in the Partition Boot Sector.
		> Cluster: addressable blocks that many file system formats use
			- Always a multiple of the sector size typically 4096 bytes, (or 8 sectors), in Windows.
			- defined in the Partition Boot Sector.
		> Logical Cluster Number (LCN): Cluster address relative to the storage media.
		> Virtual Cluster Number (VCN): Cluster address relative to the start of the file.
		> File System Format: defines the way that file data is stored on storage media
		> Metadata:  the data stored on the volume that defines how the file system is implemented within the volume.
	- Advanced Features 
		> Multiple Data Streams: With multiple data streams, each unit of information associated with a file is implemented as a file attribute. Each attribute consists of a single stream. This implementation makes it easy to add more attributes.

		> Unicode-Based Names: Unicode-based naming is a 16-bit character coding scheme that allows each character in each of the world languages to be uniquely represented. This makes it easy to move data from one country to another. Each complete filename path can be up to 255 characters in length.

		> Dynamic Bad-Cluster Remapping: This feature is enabled when a bad cluster is identified and the data is remapped to a new cluster. The process is as follows: the NTFS sends a warning that the cluster is bad, and then a good copy of the sector's data is retrieved. A new cluster is allocated, and the data is copied to the new cluster. The bad cluster is flagged and no longer used.

		> Per User Volume Quotas: This feature allows for per-user quota specification of quota enforcement, which is useful for usage tracking and tracking when a user reaches warning and threshold limits.

		> Encryption: This process is transparent to the user and is performed using the Encrypting File System (EFS). Encryption is accomplished using private/public key pairs.

		> Defragmentation: This feature is enabled when files occupy non-contiguous space on the hard disk. The NTFS has tools to make the files contiguous.

		> Read-Only Support: This feature was introduced with Windows XP and allows mounted volumes to be read-only.
	- Master File Table
		- Every file and directory has at least one entry in the MFT
		- Entries are typically 1KB in size
		- Contains attributes that define and describe the MFT and its sub components
	- Metadata Files
		> Entries 0-15: for windows standard system "metadata files"
		> Entries 16-22: overflow
		> Entry 23: First Entry allocated for user files or directories
		- The first 12 Entries:
			0. $MFT			The MFT itself
			1. $MFTMirr		Backup of the first entry
			2. $LogFile		Journal that records metadata transactions
			3. $Volume		Volume information such as:
				- label
				- identifier
				- version
			4. $AttrDef		attribute information, such as:
				- identifier
				- values
				- names
				- sizes
			5. \			root directory of the file system
			6. $Bitmap		 allocation status of each cluster in the file system.
				- If the bit is set to 1, the cluster is allocated. 
				- If set to 0, it is not.
			7. $Boot		 boot sector and boot code for the file system
				- provides basic information such as:
					- the size of each cluster
					- number of sectors in the file system
					- starting cluster address of the MFT
					- size of each MFT entry
					- serial number for the file system.
			8. $BadClus		clusters that have bad sectors
			9. $Secure		 information about the security and access control for the files 
				- (Windows 2000 and XP versions only)
			10. $Upcase		uppercase version of every Unicode character
			11. $Extend		 files for optional extensions 
				- (Note: Microsoft does not typically place the files in this directory into the reserved MFT entries)
	> Layout: General Guidlines (Not Strict)
		> MFT Zone: A collection of clusters not used to store file or directory content. 
			- Created to be as small as possible
			- Only expands when it is needed for more entries
			- Can become easily fragmented
		- on-disk allocation usually varies depending on the Windows operating system.
			- Exception: the first cluster is always the $Boot file
	- MFT Entry Standard Attributes
		>> $INDEX: Provides information describing how the file is stored in the nodes of a tree
		- Everything is an Attribute (even the data)
		- Attribute Types:
			> standard: present in every file
				-Including:
					>> $STANDARD_INFORMATION: Contains ownership, security, quota, and time stamp information
						- Information
							- TypeID = 16
							- 72 Bytes in Windows XP
							- Always the firts Attribute in the MFT entry	
								- Because it has the lowest type ID
						- Time Stamp Values
							- Creation Time
							- Modified Time
							- MFT Modified Time
							- Accessed Time
					>> $FILE_NAME:
						- Information
							- TypeID = 48
							- 66 bytes plus the file names
							- Occurs at least once per MFT entry
							- same temporal time stamps as $STANDARD_INFORMATION
								- not typically updated
							- The time stamps usually correspond to when the file was created, moved, or renamed.
					>> $DATA: Every file has a $DATA attribute which contains the file content 
						- Information
							- TypeID = 128
							- Variable Size
							- A file may contain more than one $DATA attribute
								- additional attributes are called Alternate Data Streams
							- The original $DATA attribute does not have a name associated with it
							- Additional $DATA attributes must be named

			> Well-known: may or may not exist with every file
	> OpLock (Opportunistic lock): a lock placed by a client on a file residing on a server.
		- In My Words
			1. A client request for a file be locked on the server
			2. The server says yes and locks the file
			3. While the file is locked, the cached file and the server file will be in sync... becasue neither of them are changing. 
	- File Locations
			- Program Files: installed programs
			- Users: contains user profiles (Windows Vista +)
			- Documents and Settings: user profiles (user hives) (Windows XP)
			- Program Files (x86): - contains installed 32-bit programs on 64-bit architectures
			- \Windows\Prefetch: on XP and up; stores pathname and mapping of last time application was run. For example, Acrobat reader will load all dlls the first time it is run. It will be pre-fetched, if possible for the second time.
			- \Windows\SoftwareDistribution: Windows downloaded updates
			- \Windows\$NT*: Location of replaced files after a system update or service pack so a user can roll back to previous versions
			- \Windows\system32\config:registry files
			- \Windows\system32\dllcache: backed up critical system files
			- \Windows\system32\drivers\etc: system (tcp/ip) network files
			- \Windows\system32\Repair: contains the backup, or off-line copy, of registry files
}}} ###
{{{ ###WMI (Windows Managment Instrumentation)
	> WMI: Defines a set of environment-independent specifications which allow management information to be shared between management applications.
	- Installed since windows millenium
	- Microsft implementation of WBEM
	> WBEM: Web Based Enterprise Managment. Industry Standardized system Managmet.
	> CIM: Common Industry Standard: Standardized info formatting.
	> WMIC: Windows Mangment Instrumentation Command-Line: command-line and scripting interface that simplifies the use of WMI and systems managed through WMI.
		- Can be used by:
			- Command Prompt
				$$ wmic useraccount get
			- WMIC shell prompt
				$$ wmic
				$$ wmic:root\cli> useraccount get 
		- Based on alias's
		- WMI data and many WMI features are also accessible through WMI without aliases using the CLASS and PATH commands.
		- Command composition:
			> Alias: Friendly renaming of a class, property, or method that makes WMI easier to use and read.
				- find available aliases via /?
				- find alias for class via <classname> /?
			> Verb: To use verbs:
				$  <aliasname> verb 
				- not all aliases support all verbs 
			> Switch: WMIC options set locally or globally.
{{{ ##Wmic Examples
	- View all processes
		$ wmic PROCESS
	- view all attributes of explorer.exe
		$ wmic PROCESS WHERE (Descriptions="explorer.exe")
		- WO Aliases
		$? wmic PATH Win32_Process.Description="explorer.exe"
	- View certain attributes
		$ wmic PROCESS GET Name, Handle, PageFaults
		- WO Aliases
		$ wmic PATH Win32_Process Get Name, Handle, PageFaults 
	- Execute on remote system
		$? wmic /NODE 1.1.1.1 /USER cschmid /PASSWORD L33tHax0r
	- get powersupply status
		$ wmic computersystem get powersupplystate /value
	- get datafile version 
		$ wmic datafile where name="c:\\windows\\system32\\win32k.sys" get version
	- Enable an account
		$ wmic useraccount where caption="wmic7\\vhalen" get set disabled=False
	- get KB hotfix list
		$ wmic qfe get hotfixid
}}} #
}}} ###
{{{ ###PsExec
	> PsExec: A light-weight telnet-replacement that lets you execute processes on other systems
		- Full interactivity for console applications.
		- No client software needed.
		- remote enablings tools that dont have remote enabling built-in (ipconfig)

{{{ #PsExec Examples
	- Basic usage
		$ psexec \\remote-computer -u domain\username -p password -accepteula command to be executed
		$$ psexec \\xp.ops.local -u xp\administrator -p L33tHax0r -accepteula ipconfig /all
	- NOTE: -accpeteula is often a big deal.
	- Start system account 
		$ psexec -s cmd.exe
	- start service account 
		$ .\PSExec64.exe -i -u "nt authority\local service" cmd.exe
}}} #
}}} ###

