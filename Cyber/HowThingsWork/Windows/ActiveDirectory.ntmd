
{{{ ###AD Concepts
	
	> AD: Hierarchial database (X.500 standard) for systems administration and network managment
		- Site 		= Physical
		- Domain	= Logical
		- Benefits:
			- You can design and maintain the logical and physical structures of your network independently
			- You do not have to base domain namespaces on your physical network,
			- You can deploy domain controllers for multiple domains within the same site, and
			- You can also deploy domain controllers for the same domain in multiple sites.
		- AD domain relies on a global catalog database which contains a global listing of all objects in the forest.
	
	> Objects: a distinctly named set of attributes that represents a network resource
		- Objects have attributes and attribute values
		- Each object has:
			> GUID: (Globally Unique Identifier)
				- 128-Bit Number
				- Unique within a forest
				- Does Not change
			- LDAP DN (Lightweight Directory Access Protocol) (Distinguished Name)
	
	> Schema: list of definitions that determine the kinds of objects and types of information about those objects that can be stored in AD.
		- Types of Objects:
			> Schema Class:
				- Defines the possible AD objects that can be created
				- Functions as a template for creating new AD objects
				- Each schema class is a collection of schema attribute objects
				- When you create a schema class, the schema attributes store the information that describes the object
			
			> Schema Attribute:
				- Defines the schema class objects with which they are associated.
	
	> Domain: a logical group of computers that share the same AD database and namespace.
		- Core unit of logical structure in AD
		- Example: if ( Domain == yeet.com ){ computernames like "workstation1.yeet.com" }
		- Resources (printers, login info, etc...) can be shared across multiple domains 
 
	> DC: holds a copy of the AD database and replicates changes to other DCs.
		- has " Active Directory Domain Services role"
		- JOB = 
			- authenticate users and determine accesses after authentication occurs.
			- perform collision detection
			- provide fault tolerance 
			- manage all aspects of the users' domain interactions. 
		- Replication:
			- Protocol:
				- RPC: For replication
				- SMTP: Schema or Config Changes
			- Done via a "Pull" method
				- Windows 2003	= 15 seconds between pulls (Only replicates changed information)(compreses over WAN links)
				- Windows 2000	= 5 Minutes between pulls 
			> MultiMaster Replication: No Master. Each DC treated as authority
		- "Please use as few domains as possible" -Microsoft
		
	> OU: (Organizational Unit) Used for ease of administration and to create an AD structure in the company's geographic or organizational terms or needs
		- Reasons to create an OU:
			- Organizational Structure: allows a company to build a structure in AD which matches their firmâ€™s geographic or organizational structure.
			- Security Rights: allow you to apply AD policies to one OU which are different than another
			- Delegated Administration: AD architects can design the structure to allow local administrators certain administrative responsibility for their OU and no other
			
	> Trees: Created by adding one or more child domains to a parent domain.
		-  In a tree, all domains share the same namespace and naming structure
	
	> Forest: A forest is a grouping or hierarchical arrangement of one or more separate and completely independent domain trees. 
	
	> Site: AD uses topology information, stored as site and site link objects in the directory, to build the most efficient replication topology
		- enables clients to find local resources such as printers, shares, or domain controllers.
		- Purpose:
			- Physical Location Determination
			- Replication
	
	> Global Catalog: contains a subset of information (such as a user's first name and last name) and the DN of the object so your client can contact the proper domain controller

	> DN: (Destinguished Name) the full address of an object in the directory
		- every object in Active Directory has a distinguished name
		- Example: if (printer in yeet.com domain){ (CN=AcctLaser1,OU=Accounting,DC=yeet,DC=com) }
		
	
## FSMO

	> FSMO: (Flexible Single Master Opperations) 
		- Roles:
			- Forrest Wide:
				> Schema Master: controls all updates and modifications to the schema.
					- There can only be one per forest 
				> Domain Naming Master: controls the addition or removal of domains in the forest.
					- There can only be one per forest 
			- Domain Wide:
				> Infrastructure Master: responsible for updating references from objects in its domain to objects in other domains.
					- There can only be one per domain 
				> RID Master: responsible for processing RID pool requests from all DCs in a particular domain
					- There can only be one per domain 
				> PDC Emulator:a DC that advertises itself as the primary domain controller (PDC) to workstations, member servers, and DCs that are running earlier versions of Windows.
					- There can only be one per domain 
					- Also acts as "Domain Mater Browser"
					- Handles password discrepencies
			
## LDAP 
	
	> LDAP: (Lightweight Directory Access Protocol)
		- Naming:
			- Example:
				- DN = (CN=Squid,OU=Accounting,DC=yeet,DC=com)
					- Unique
					- Unamiguous
				- Relative Distinguished Name = Squid 

## User Accounts
	
	- Each User Account has:
		- User logon name 
		- Pre-Windows 2000 user logon name (SAM account manager account name)
			- AD suggests a pre-Windows 2000 user logon name using the first 20 bytes of the user logon name
			- required for compatibility with Windows NT 4.0 and Windows NT 3.x domains
			- refered to as a "flat name"
			- Every name must be unique within the domain 
		- UPN (User Principal Name) suffix
			- "friendly" name
			- shorter than dn
			- consists of:
				- username
				- @
				- DNS domain name 
			- Often also the users email address 
			- Example: squid@yee.chs.wtf 
			- Independent of the distinguished name of the user object so a user object can be moved or renamed without affecting the user logon name.
	
}}} ###

{{{ ### Tools

## Not Built-In 

### LFIDE.exe 

	- Used to:
		- Import, export, modify, and delete directory objects
		- Export AD user and group information to other applications or services
		- Populate AD with data from other directory services
		- Populating passwords, which CSVDE doesn't
		- This includes information that is stored in the schema

### CSVDE.exe (Comma Separated Value Data Export tool)

	-Used to:
		- Export and import (add) object data only
		- Export directly to or import directly from an MS Excel spreadsheet
		- Execute batch operations that are based on CSV

	- CSVDE cannot be used to modify or delete objects.

### ENUMPROP.exe (Enumerate Properties tool)

	-Used to:
		- Provide information about the domain, domain controller, and site
		- Display the security descriptor, or list only a given set of attributes for an object
		- Recognize globally unique identifiers (GUIDs) (objectGUID and schemaGUID) and security identifiers (SIDs)

	-  good command to run when you first land on a new target since it requires no authentication (just need to be on the domain)
		
## DStools (Domain Service Tools)

	- Shipped nativly with server 2003
	
### DSADD: This tool's commands add specific types of objects to the directory.

    - DSADD COMPUTER: Adds a computer to the directory
    - DSADD CONTACT: Adds a contact to the directory
    - DSADD GROUP: Adds a group to the directory
    - DSADD OU: Adds an organizational unit to the directory
    - DSADD USER: Adds a user to the directory
    - DSADD QUOTA: Adds a quota specification to a directory partition

### DSGET: This tool's commands display the selected properties of a specific object in the directory.

    - DSGET COMPUTER: Displays properties of computers in the directory
    - DSGET CONTACT: Displays properties of contacts in the directory
    - DSGET SUBNET: Displays properties of subnets in the directory
    - DSGET GROUP: Displays properties of groups in the directory
    - DSGET OU: Displays properties of organizational units in the directory
    - DSGET SERVER: Displays properties of servers in the directory
    - DSGET SITE: Displays properties of sites in the directory
    - DSGET USER: Displays properties of users in the directory
    - DSGET QUOTA: Displays properties of quotas in the directory
    - DSGET PARTITION: Displays properties of partitions in the directory

### DSMOD: This tool's commands modify existing objects in the directory.

    - DSMOD COMPUTER: Modifies an existing computer in the directory
    - DSMOD CONTACT: Modifies an existing contact in the directory
    - DSMOD GROUP: Modifies an existing group in the directory
    - DSMOD OU: Modifies an existing organizational unit in the directory
    - DSMOD SERVER: Modifies an existing domain controller in the directory
    - DSMOD USER: Modifies an existing user in the directory
    - DSMOD QUOTA: Modifies an existing quota specification in the directory
    - DSMOD PARTITION: Modifies attributes of one or more existing partitions in the directory

### DSQUERY: This tool's commands allow you to query the directory according to specific criteria.

    - DSQUERY COMPUTER: Finds computers in the directory
    - DSQUERY CONTACT: Finds contacts in the directory
    - DSQUERY SUBNET: Finds subnets in the directory
    - DSQUERY GROUP: Finds groups in the directory
    - DSQUERY OU: Finds organizational units in the directory
    - DSQUERY SITE: Finds sites in the directory
    - DSQUERY SERVER: Finds domain controllers in the directory
    - DSQUERY USER: Finds users in the directory
    - DSQUERY QUOTA: Finds quota specifications in the directory
    - DSQUERY PARTITION: Finds partitions in the directory
    - DSQUERY *: Finds any object in the directory by using a generic LDAP query

### DSMOVE: This tool's commands move or rename objects within the directory

### DSRM: This tool's commands remove/delete objects from the directory.


$ dsquery computer domainroot -name DC
$ dsget user "CN=Christina Coffey,CN=Users,DC=corp,DC=skyriver,DC=com"
$ dsquery computer | dsget comuter -samid
$ dsquery user -name *phillips | dsget user -samid -upn
$ dsquery user -name *phillips | dsget user -memberof
$ dsquery group "CN=Domain Admins,CN=Users,DC=corp,DC=skyriver,DC=com" | dsget group -members
$ dsquery * -attr operatingSystem operatingSystemServicePack -filter "(|(operatingSystem=*))"
$ dsquery user -name *carpenter* | dsmod user -desc "Field Manager"
$ dsquery group "CN=managers,CN=Users,DC=corp,DC=skyriver,DC=com" | dsmod group -addmbr "CN=Bob Carpenter,CN=Users,DC=corp,DC=skyriver,DC=com"
$ dsquery group "CN=managers,CN=Users,DC=corp,DC=skyriver,DC=com" | dsget group -members 
$ dsadd user "CN=Larry Zonka,CN=users,DC=corp,DC=skyriver,DC=com" -samid lzonka -upn lzonka@ops.local -fn "Larry" -ln "Zonka" -display "Larry Zonka" -pwd L33tHax0r -desc "Cool Guy" -disabled no
$ dsrm "CN=Larry Zonka,CN=Users,DC=corp,DC=skyriver,DC=com" -noprompt

## Fun Facts 
	- A domain user will be able to query and get information from Active Directory.
	- The $ in the samid attribute flags the object as a computer
	
}}} ###

{{{ ###Kerberos
	
	-  default authentication mechanism implemented within AD
	-  Encrypted messages are exchanged between the Kerberos Key Distribution Center (KDC), the client, and the requested resource.
	-  uses symmetric key cryptography to protect user passwords while in transit

## The Process

	1. CLIENT: AS_REQ (Authentication Service Request) sent  to AS (Autthenticating Service) within KDC requesting authentication.
		- The request is encrypted with the NTLM hash of the user's password. 
	2. KDC: AS (Authentication Service) receives the request and verifies that the user is valid by checking AD to confirm that the user is a member of the domain
		- and then uses the hash stored in its database to decrypt the request. Assuming the user is verified, the 
	3. KDC AS responds by sending a Ticket Granting Ticket (TGT).
	4. CLIENT: TGS_REQ (Ticket Granting service Request) is sent to TGS (Ticket Granting Service) Within the KDC
	5. KDC: TGS_REP (Ticket Granting Service Respose) is sent to client (assuming that the requeste resourse exists.
	6. CLIENT: Decrypts TGS session key contained in the TGT 
	7. CLIENT: generates and sends an Authenticator message AND the encrypted Service Ticket (ST) to the resource
	8. CLIENT: can now use resource
	
### In brief

	1. Client sends AS_REQ to KDC
	2. KDC decryps/verifies/Responds with TGT 

}}} ###




dsquery computer domainroot -name DC
dsget user "CN=Christina Coffey,CN=Users,DC=corp,DC=skyriver,DC=com"
dsquery computer | dsget comuter -samid
dsquery user -name *phillips | dsget user -samid -upn
dsquery user -name *phillips | dsget user -memberof
dsquery group "CN=Domain Admins,CN=Users,DC=corp,DC=skyriver,DC=com" | dsget group -members
dsquery * -attr operatingSystem operatingSystemServicePack -filter "(|(operatingSystem=*))"
dsquery user -name *carpenter* | dsmod user -desc "Field Manager"
dsquery group "CN=managers,CN=Users,DC=corp,DC=skyriver,DC=com" | dsmod group -addmbr "CN=Bob Carpenter,CN=Users,DC=corp,DC=skyriver,DC=com"
dsquery group "CN=managers,CN=Users,DC=corp,DC=skyriver,DC=com" | dsget group -members 
dsadd user "CN=Larry Zonka,CN=users,DC=corp,DC=skyriver,DC=com" -samid lzonka -upn lzonka@ops.local -fn "Larry" -ln "Zonka" -display "Larry Zonka" -pwd L33tHax0r -desc "Cool Guy" -disabled no
dsrm "CN=Larry Zonka,CN=Users,DC=corp,DC=skyriver,DC=com" -noprompt



